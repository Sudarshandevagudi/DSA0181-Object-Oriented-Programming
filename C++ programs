1) Write a program to read in a character and determine if it is a vowel or a consonant

#include <iostream>
using namespace std;

int main() {
    char ch;

    // Read a character from the user
    cout << "Enter a character: ";
    cin >> ch;

    // Check if the entered character is a vowel
    if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' ||
        ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {
        cout << ch << " is a vowel." << endl;
    } else {
        cout << ch << " is a consonant." << endl;
    }

    return 0;
}

2) Write a program to read in two integers and use the conditional operator to determine 
which number is greater

#include <iostream>
using namespace std;

int main() {
    int num1, num2;

    // Read two integers from the user
    cout << "Enter the first integer: ";
    cin >> num1;

    cout << "Enter the second integer: ";
    cin >> num2;
    
    if (num1 == num2)
        cout << "both are equal";
        else if (num1 > num2)
        cout << num1 << " is greater than " << num2;
        else
        cout << num2 << " is greater than " << num1;

    return 0;
}

3) Write a program to read in two integers and swap their values using the bitwise XOR 
operator. 

#include <iostream>
using namespace std;

int main() {
    int num1, num2;

    // Read two integers from the user
    cout << "Enter the first integer: ";
    cin >> num1;

    cout << "Enter the second integer: ";
    cin >> num2;

    // Swap values using bitwise XOR
    num1 = num1 ^ num2;
    num2 = num1 ^ num2;
    num1 = num1 ^ num2;

    // Output the swapped values
    cout << "After swapping:" << endl;
    cout << "First integer: " << num1 << endl;
    cout << "Second integer: " << num2 << endl;

    return 0;
}

4) a program to read in a floating-point number and round it to the nearest integer 
using the floor and ceil functions

#include <iostream>
#include <cmath>
using namespace std;

int main() {
    double floatingNumber;

    // Read a floating-point number from the user
    cout << "Enter a floating-point number: ";
    cin >> floatingNumber;

    // Round to the nearest integer using floor and ceil
    int roundedDown = static_cast<int>(floor(floatingNumber));
    int roundedUp = static_cast<int>(ceil(floatingNumber));

    // Output the results
    cout << "Original number: " << floatingNumber << endl;
    cout << "Rounded down: " << roundedDown << endl;
    cout << "Rounded up: " << roundedUp << endl;

    return 0;
}

5) Write a program to read in three integers and determine which one is the maximum using 
the ternary conditional operator

#include <iostream>
using namespace std;

int main() {
    int num1, num2, num3;

    // Read three integers from the user
    cout << "Enter the first integer: ";
    cin >> num1;

    cout << "Enter the second integer: ";
    cin >> num2;

    cout << "Enter the third integer: ";
    cin >> num3;

    // Use the ternary conditional operator to find the maximum
    int maxNum = (num1 > num2) ? ((num1 > num3) ? num1 : num3) : ((num2 > num3) ? num2 : num3);

    // Output the result
    cout << "The maximum number is: " << maxNum << endl;

    return 0;
}

6) Write a program to read in two integers and determine if they are equal or not using the 
ternary conditional operator. 

#include <iostream>
using namespace std;

int main() {
    int num1, num2;

    // Read two integers from the user
    cout << "Enter the first integer: ";
    cin >> num1;

    cout << "Enter the second integer: ";
    cin >> num2;

    // Use the ternary conditional operator to check if the integers are equal
    string result = (num1 == num2) ? "Equal" : "Not Equal";

    // Output the result
    cout << "The two integers are: " << result << endl;

    return 0;
}

7) Write a program to read in an integer and determine if it is divisible by 3 or not using the 
ternary conditional operator


#include <iostream>
using namespace std;

int main() {
    int num;

    // Read an integer from the user
    cout << "Enter an integer: ";
    cin >> num;

    // Use the ternary conditional operator to check if the integer is divisible by 3
    string result = (num % 3 == 0) ? "Divisible by 3" : "Not divisible by 3";

    // Output the result
    cout << "The integer is: " << result << endl;

    return 0;
}

8) Write a program to read in an integer and print the multiplication table for that number 
using a for loop

#include <iostream>

int main() {
    int num;

    // Read an integer from the user
    std::cout << "Enter an integer: ";
    std::cin >> num;

    // Print the multiplication table for the entered number
    std::cout << "Multiplication table for " << num << ":\n";
    for (int i = 1; i <= 10; ++i) {
        std::cout << num << " * " << i << " = " << (num * i) << std::endl;
    }

    return 0;
}

9) Write a program to read in an integer and print the factorial of that number using a for 
loop

#include <iostream>

int main() {
    int num;

    // Read an integer from the user
    std::cout << "Enter an integer: ";
    std::cin >> num;

    // Calculate and print the factorial of the entered number
    long long factorial = 1;
    for (int i = 1; i <= num; ++i) {
        factorial *= i;
    }

    std::cout << "Factorial of " << num << " is: " << factorial << std::endl;

    return 0;
}

10) Write a program to read in an integer and determine if it is a prime number or not using a 
for loop

#include <iostream>

int main() {
    int num;
    bool isPrime = true;

    // Read an integer from the user
    std::cout << "Enter an integer: ";
    std::cin >> num;

    // Check if the entered number is a prime number
    if (num <= 1) {
        isPrime = false;
    } else {
        for (int i = 2; i <= num / 2; ++i) {
            if (num % i == 0) {
                isPrime = false;
                break;
            }
        }
    }

    // Output the result
    if (isPrime) {
        std::cout << num << " is a prime number." << std::endl;
    } else {
        std::cout << num << " is not a prime number." << std::endl;
    }

    return 0;
}

11) Write a program to read in an integer and print the Fibonacci series up to that number 
using a for loop

#include <iostream>

int main() {
    int num;

    // Read an integer from the user
    std::cout << "Enter an integer: ";
    std::cin >> num;

    // Print Fibonacci series up to the entered number
    int a = 0, b = 1, nextTerm;
    std::cout << "Fibonacci series up to " << num << ": ";

    for (int i=0;i<=num;i++) {
        std::cout << a << " ";
        nextTerm = a + b;
        a = b;
        b = nextTerm;
    }

    std::cout << std::endl;

    return 0;
}


12) Write a program to read in an integer and print the sum of all its digits using a while loop. 

#include <iostream>

int main() {
    int num, originalNum, remainder, sum = 0;

    // Read an integer from the user
    std::cout << "Enter an integer: ";
    std::cin >> num;

    // Store the original number
    originalNum = num;

    // Calculate the sum of digits using a while loop
    while (num != 0) {
        remainder = num % 10;
        sum += remainder;
        num /= 10;
    }

    // Output the result
    std::cout << "Sum of digits of " << originalNum << " is: " << sum << std::endl;

    return 0;
}

13) Write a program to read in an integer and determine if it is a palindrome or not using a 
while loop. 

#include <iostream>

int main() {
    int num, originalNum, reversedNum = 0, remainder;

    // Read an integer from the user
    std::cout << "Enter an integer: ";
    std::cin >> num;

    // Store the original number
    originalNum = num;

    // Reverse the number using a while loop
    while (num > 0) {
        remainder = num % 10;
        reversedNum = reversedNum * 10 + remainder;
        num /= 10;
    }

    // Check if the original number is equal to its reverse
    if (originalNum == reversedNum) {
        std::cout << originalNum << " is a palindrome." << std::endl;
    } else {
        std::cout << originalNum << " is not a palindrome." << std::endl;
    }

    return 0;
}

14) Write a program to read in two integers and compute their greatest common divisor using 
a do-while loop. 

#include <iostream>

int main() {
    int num1, num2;

    // Read two integers from the user
    std::cout << "Enter the first integer: ";
    std::cin >> num1;

    std::cout << "Enter the second integer: ";
    std::cin >> num2;

    // Ensure both numbers are positive
    if (num1 <= 0 || num2 <= 0) {
        std::cout << "Please enter positive integers." << std::endl;
        return 1;
    }

    int gcd;

    // Compute the GCD using the Euclidean algorithm and a do-while loop
    do {
        gcd = num1 % num2;
        num1 = num2;
        num2 = gcd;
    } while (num2 != 0);

    // Output the result
    std::cout << "The greatest common divisor (GCD) is: " << num1 << std::endl;

    return 0;
}


15) Write a program to read in an integer and determine if it is an Armstrong number or not. 

#include <iostream>
using namespace std;

int main() {
    int num, originalNum, remainder, result = 0;
    cout << "Enter a three-digit integer: ";
    cin >> num;
    originalNum = num;

    while (originalNum != 0) {
        // remainder contains the last digit
        remainder = originalNum % 10;
        
        result += remainder * remainder * remainder;
        
        // removing last digit from the orignal number
        originalNum /= 10;
    }

    if (result == num)
        cout << num << " is an Armstrong number.";
    else
        cout << num << " is not an Armstrong number.";

    return 0;
}

16) PERFORM ARITHMETIC OPERATIONS

#include <iostream>

using namespace std;

int main() {
    int num1, num2,sum,difference,product,division,modulo;
    cout << "Enter the first floating-point number: ";
    cin >> num1;
    cout << "Enter the second floating-point number: ";
    cin >> num2;
    sum = num1 + num2;
    difference = num1 - num2;
    product = num1 * num2;
    if (num2 != 0) {
        division = num1 / num2;
        modulo = num1 % num2;
        cout << "Sum: " << sum << endl;
        cout << "Difference: " << difference << endl;
        cout << "Product: " << product << endl;
        cout << "division: " << division << endl;
        cout << "modulo: " << modulo << endl;
    } else 
        cout << "Error: Division by zero is undefined." << endl;
        return 0;
    
}

17) FLOATING NUMBER ARITHMETIC OPERATIONS

#include <iostream>
#include <cmath> 
using namespace std;

int main() {
    float num1, num2;
    cout << "Enter first floating-point number: ";
    cin >> num1;
    cout << "Enter second floating-point number: ";
    cin >> num2;
    float sum = num1 + num2;
    cout << "Addition: " << num1 << " + " << num2 << " = " << sum << endl;

    float diff = num1 - num2;
    cout << "Subtraction: " << num1 << " - " << num2 << " = " << diff << endl;

    float product = num1 * num2;
    cout << "Multiplication: " << num1 << " * " << num2 << " = " << product << endl;

    if (num2 != 0) {
        float quotient = num1 / num2;
        cout << "Division: " << num1 << " / " << num2 << " = " << quotient << endl;
    } else {
        cout << "Division by zero is undefined." << endl;
    }

    if (num2 != 0) {
        float mod = fmod(num1, num2); 
        cout << "Modulo: " << num1 << " % " << num2 << " = " << mod << endl;
    } else {
        cout << "Modulo by zero is undefined." << endl;
    }

    return 0;
}

18 ) Write a C++ program to reverse the elements of an array.


#include <iostream>
using namespace std;

void reverseArray(int arr[], int n) {
  int temp;
  for(int i = 0; i < n / 2; i++) {
    temp = arr[i];
    arr[i] = arr[n - i - 1];
    arr[n - i - 1] = temp;
  }
}

int main() {
  int n;
  cout << "Enter size of array: ";
  cin >> n;
  
  int arr[n];
  cout << "Enter elements: ";
  for(int i = 0; i < n; i++) {
    cin >> arr[i]; 
  }
  
  reverseArray(arr, n); 
  
  cout << "Reversed array: ";
  for(int i = 0; i < n; i++) {
    cout << arr[i] << " ";  
  }
  
  return 0;
}


19) Write a C++ program to insert an element into an array at a specific position


#include <iostream>
using namespace std;

void insertElement(int arr[], int &n, int x, int pos) {
  
  // shift elements to the right  
  for(int i = n; i >= pos; i--) {
    arr[i] = arr[i - 1];
  }
  
  // insert x at pos
  arr[pos - 1] = x;
  
  // increase size
  n++; 
}

int main() {

  int n;
  cout << "Enter size of array: ";
  cin >> n;
  
  int arr[n+1]; // size n+1 to handle insertion
  
  cout << "Enter elements: ";
  for(int i = 0; i < n; i++) {
     cin >> arr[i];
  }

  int x; 
  cout << "\nEnter element to insert: ";
  cin >> x;
  
  int pos;
  cout << "Enter position: ";
  cin >> pos;
  
  insertElement(arr, n, x, pos); 

  cout << "\nArray after insertion: ";
  for(int i = 0; i < n; i++) {
    cout << arr[i] << " ";
  } 
  
  return 0;
}


20) Write a C++ program to delete an element from an array at a specific position.


#include <iostream>
using namespace std;

void deleteElement(int arr[], int &n, int pos) {
  // shift elements left  
  for(int i = pos-1; i < n-1; i++) {
    arr[i] = arr[i + 1];
  }
  
  // decrease size
  n--;
}

int main() {

  int n; 
  cout << "Enter size of array: ";
  cin >> n;

  int arr[n];
  cout << "Enter elements: ";

  for(int i = 0; i < n; i++) {
    cin >> arr[i];  
  }

  int pos;
  cout << "\nEnter position to delete: ";
  cin >> pos;

  deleteElement(arr, n, pos);

  cout << "\nArray after deletion: "; 
  for(int i = 0; i < n; i++) {
    cout << arr[i] << " "; 
  }

  return 0;
}

21) Write a C++ program to find the sum of elements in an array.


#include <iostream>
using namespace std;

int findSum(int arr[], int n) {
  int sum = 0;
  for(int i = 0; i < n; i++) {
    sum += arr[i];
  }
  return sum;
}

int main() {
  
  int n;
  cout << "Enter size of array: ";
  cin >> n;

  int arr[n];  
  cout << "Enter elements: ";
  for(int i = 0; i < n; i++) {
     cin >> arr[i];
  }

  int sum = findSum(arr, n);
  
  cout << "\nSum of array elements: " << sum;
  
  return 0;
}


22 ) Write a C++ program to find the average of elements in an array.


#include <iostream>
using namespace std;

float findAverage(int arr[], int n) {
  int sum = 0; 
  for(int i = 0; i < n; i++) {
    sum += arr[i];
  }
  
  return (float)sum / n; 
}

int main() {

  int n;
  cout << "Enter size of array: ";
  cin >> n;

  int arr[n];
  cout << "Enter " << n << " elements: ";
  for(int i = 0; i < n; i++) {
    cin >> arr[i];
  }

  float avg = findAverage(arr, n);

  cout << "\nAverage of array elements: " << avg;
  
  return 0;
}


23 )  Write a C++ program to find the second largest element in an array


#include <iostream>
using namespace std;

int secondLargest(int arr[], int n){
  
  int largest = 0, second = -1;

  for(int i = 1; i < n; i++){
    if(arr[i] > arr[largest]){
      second = largest;
      largest = i; 
    }
    else if(arr[i] != arr[largest]){
      if(second == -1 || arr[i] > arr[second]) {
        second = i;
      }
    } 
  }

  if(second == -1) {
    return -1;  
  }  
  return arr[second];
}

int main() {

  int n;
  cout << "Enter size: ";
  cin >> n;  

  int arr[n];
  cout << "Enter elements: ";
  for(int i=0; i<n; i++) {
    cin>>arr[i];
  }
  
  int res = secondLargest(arr, n);

  if(res != -1) {
    cout << "Second largest element: " << res;
  }
  else {
    cout << "There is no second largest element";
  }

  return 0;
}


24 ) Write a C++ program to find the number of occurrences of a value in an array.

#include <iostream>
using namespace std;

int findOccurrences(int arr[], int n, int x) {
  int count = 0;
  for(int i = 0; i < n; i++) {
    if(arr[i] == x)
      count++;
  }
  return count;
}

int main() {
  
  int n;
  cout << "Enter size of array: ";
  cin >> n;

  int arr[n];
  cout << "Enter elements: ";
  for(int i = 0; i < n; i++) {
    cin >> arr[i];  
  }

  int x;
  cout << "\nEnter element to search: ";  
  cin >> x;

  int occ = findOccurrences(arr, n, x);
  
  cout << x << " occurs " << occ << " times.";

  return 0;  
}


25 ) Write a C++ program to merge two arrays into a single array.


#include <iostream>
using namespace std;

void mergeArrays(int arr1[], int n1, int arr2[], int n2, int arr3[]) {
  int i = 0, j = 0, k = 0;
  
  // traverse both arrays 
  while(i < n1 && j < n2) {
    if(arr1[i] < arr2[j]) {
      arr3[k] = arr1[i];
      i++;
    }
    else {
      arr3[k] = arr2[j];
      j++;
    }
    k++;
  }

  // store remaining elements of first array
  while(i < n1) {
    arr3[k] = arr1[i];
    i++; k++;
  }
  
  // store remaining elements of second array
  while(j < n2) {
    arr3[k] = arr2[j];
    j++; k++;  
  }
}

int main() {
  
  int n1, n2;

  cout << "Enter size of first array: ";
  cin >> n1;

  int arr1[n1];  
  cout << "Enter elements: ";
  for(int i = 0; i < n1; i++) {
    cin >> arr1[i]; 
  }

  cout << "Enter size of second array: ";
  cin >> n2;

  int arr2[n2];
  cout << "Enter elements: ";
  for(int i = 0; i < n2; i++) { 
    cin >> arr2[i];
  }
  
  // merged array size
  int n3 = n1 + n2; 
  int arr3[n3];

  mergeArrays(arr1, n1, arr2, n2, arr3);

  // print merged array
  cout << "Merged Array: ";
  for(int i = 0; i < n3; i++) {
    cout << arr3[i] << " ";
  }
  
  return 0;
}


26 ) Write a C++ program to create a dynamic array using pointers and display its values.


#include <iostream>
using namespace std;

int main() {

  int n;
  cout << "Enter size: ";
  cin >> n;

  int* arr = new int[n];

  cout << "Enter elements: " << endl;
  for(int i = 0; i < n; i++) {
    cin >> arr[i];
  }

  cout << "Array elements: " << endl;
  for(int i = 0; i < n; i++) {
    cout << arr[i] << " "; 
  }

  delete [] arr;
  
  return 0;
}


27 ) Write a C++ program to create a dynamic two-dimensional array using pointers and 
display its values.


#include <iostream>
using namespace std;

int main() {

  int rows, cols;

  cout << "Enter rows and columns: ";
  cin >> rows >> cols;

  // allocate memory dynamically 
  int** arr = new int*[rows];
  for(int i=0; i<rows; i++) {
    arr[i] = new int[cols]; 
  }

  cout << "Enter elements: " << endl;
  
  // input elements  
  for(int i=0; i<rows; i++) {
    for(int j=0; j<cols; j++) {
      cin >> arr[i][j];
    }
  }
  
  cout << "2D array elements: " << endl;
  
  // print array 
  for(int i=0; i<rows; i++) {
    for(int j=0; j<cols; j++) {
      cout << arr[i][j] << " "; 
    }
    cout << endl;  
  }

  // release memory
  for(int i=0; i<rows; i++)
   delete [] arr[i];

  delete [] arr;
  
  return 0;
}


28 ) Write a C++ program to add 2 matrics.

#include <iostream>
using namespace std;

int main() {
  // Declare variables for matrix dimensions
  int rows, cols;

  // Get matrix dimensions from the user
  cout << "Enter number of rows: "; 
  cin >> rows;
  cout << "Enter number of columns: "; 
  cin >> cols;
  
  // Declare matrices for input
  int mat1[rows][cols];
  int mat2[rows][cols];
  
  // Read elements of matrix 1 from the user
  cout << "Enter elements of matrix 1:" << endl;
  for(int i = 0; i < rows; i++) {
    for(int j = 0; j < cols; j++) {
      cin >> mat1[i][j]; 
    }
  }

  // Read elements of matrix 2 from the user
  cout << "Enter elements of matrix 2:" << endl;
  for(int i = 0; i < rows; i++) {
    for(int j = 0; j < cols; j++) {
      cin >> mat2[i][j];
    }
  }

  // Declare matrix for the sum of matrices
  int sum[rows][cols];

  // Perform addition of corresponding elements
  for(int i = 0; i < rows; i++) {
    for(int j = 0; j < cols; j++) {
      sum[i][j] = mat1[i][j] + mat2[i][j];
    }
  }

  // Print the sum matrix
  cout << "Sum of matrices:" << endl;
  for(int i = 0; i < rows; i++) {
    for(int j = 0; j < cols; j++) {
      cout << sum[i][j] << " "; 
    }
    cout << endl; 
  }

  return 0;
}


29) multiply two matrices


#include <iostream>
using namespace std;

int main() {
  int r1, c1, r2, c2;

  // Get matrix 1 dimensions
  cout << "Enter number of rows and columns for first matrix: ";
  cin >> r1 >> c1;

  // Get matrix 2 dimensions 
  cout << "Enter number of rows and columns for second matrix: ";
  cin >> r2 >> c2;

  // Check if matrices can be multiplied
  if(c1 != r2) {
    cout << "Matrices cannot be multiplied";
    return 0;
  }

  // Declare matrices
  int mat1[r1][c1]; 
  int mat2[r2][c2];
  int result[r1][c2];

  // Read matrix 1
  cout << "Enter elements of matrix 1:" << endl;
  for(int i=0; i<r1; i++) {
    for(int j=0; j<c1; j++) {
      cin >> mat1[i][j];
    }
  }
  
  // Read matrix 2
  cout << "Enter elements of matrix 2:" << endl;
  for(int i=0; i<r2; i++) {
    for(int j=0; j<c2; j++) {
      cin >> mat2[i][j];
    }
  }

  // Perform multiplication
  for(int i=0; i<r1; i++) {
    for(int j=0; j<c2; j++) {
      result[i][j] = 0;
      for(int k=0; k<c1; k++) {
        result[i][j] += mat1[i][k] * mat2[k][j];
      }
    }
  }

  // Print result
  cout << "Resultant matrix: " << endl;
  for(int i=0; i<r1; i++) {
    for(int j=0; j<c2; j++){
      cout << result[i][j] << " "; 
    }
    cout << endl;
  }

  return 0;
}


30 ) Find factorial using function



#include <iostream>
using namespace std;

int factorial(int n) {
  int result = 1;
  for (int i = 2; i <= n; i++) {
    result *= i; 
  }
  return result; 
}

int main() {
  int num;
  cout << "Enter a positive integer: ";
  cin >> num;
  
  int fact = factorial(num);
  
  cout << "Factorial of " << num << " = " << fact; 
  return 0;
}


31 ) Find prime number using function


#include <iostream>
using namespace std;

bool isPrime(int n) {
  if(n <= 1) {
    return false;
  }
  for(int i = 2; i*i <= n; i++) {
    if(n % i == 0) {
      return false; 
    }
  }
  return true;
}

int main() {
  int num;
  cout << "Enter a positive integer: ";
  cin >> num;
  
  if(isPrime(num)) {
    cout << num << " is prime."; 
  }
  else {
    cout << num << " is not prime.";
  }

  return 0;
}


32 ) Find the reverse of a string using function


#include <iostream>
#include <string>
using namespace std;

string reverseString(string str) {
  int n = str.length();
  string reversed = "";
  for(int i = n - 1; i >= 0; i--) {
    reversed += str[i];
  }
  return reversed;
}

int main() {
  string input, result;
  
  cout << "Enter a string: ";
  getline(cin, input);
  
  result = reverseString(input);
  
  cout << "Reversed string is: " << result;

  return 0;
}



33 ) Find minimum and maximum element in an array using function


#include <iostream>
#include <climits>
using namespace std;

int findMin(int[], int); 
int findMax(int[], int);

int main() {
  int n; 
  cout << "Enter size of array: ";
  cin >> n;

  int arr[n];  
  cout << "Enter elements:" << endl;
  for(int i = 0; i < n; i++) {
    cin >> arr[i]; 
  }

  int min = findMin(arr, n);
  int max = findMax(arr, n);
  
  cout << "Minimum element is " << min << endl;
  cout << "Maximum element is " << max;

  return 0;
}


int findMin(int arr[], int n) {
  int min = INT_MAX;
  for(int i = 0; i < n; i++) {
    if(arr[i] < min) {
      min = arr[i]; 
    }
  }
  return min; 
}


int findMax(int arr[], int n) {
  int max = INT_MIN; 
  for(int i = 0; i < n; i++) {
    if(arr[i] > max) {
      max = arr[i];
    }
  }
  return max;
}


34 ) Find GCD of two number using function


#include <iostream>
using namespace std;


int findGCD(int a, int b) {
  if (b == 0) 
    return a;
  else
    return findGCD(b, a % b); 
}

int main() {
  
  int num1, num2;
  
  cout << "Enter two numbers: ";
  cin >> num1 >> num2;
  
  int gcd = findGCD(num1, num2);
  
  cout << "GCD of " << num1 << " and " << num2 << " is " << gcd;

  return 0;
}

35 ) Function to count the no of elements in a string


#include <iostream>
#include <string>
using namespace std;


int countChars(string str) {
  int count = 0;
  for(int i = 0; str[i] != '\0'; i++) {
    count++;
  }
  return count;
}

int main() {
  string str;
  cout << "Enter a string: ";
  getline(cin, str);

  int numChars = countChars(str);

  cout << "Number of characters in the string: " << numChars;
  
  return 0;
}



36 ) Convert Celsius and Fahrenheit using function


#include <iostream>
using namespace std;


double celsiusToFahrenheit(double celsius) {
  return (celsius * 9/5) + 32;
}

double fahrenheitToCelsius(double fahrenheit) {
  return (fahrenheit - 32) * 5/9; 
}

int main() {
  double celsius, fahrenheit;
  
  cout << "Enter temperature in Celsius: ";
  cin >> celsius;
  
  fahrenheit = celsiusToFahrenheit(celsius);
  cout << celsius << " Celsius = " << fahrenheit << " Fahrenheit" << endl; 

  cout << "Enter temperature in Fahrenheit: ";
  cin >> fahrenheit;
  
  celsius = fahrenheitToCelsius(fahrenheit);
  cout << fahrenheit << " Fahrenheit = " << celsius << " Celsius";
  
  return 0; 
}


37 ) Find the area of a circle using function


#include <iostream>
using namespace std;


double calculateArea(double radius) {
  return 3.14 * radius * radius;
}

int main() {
  double radius;
  
  cout << "Enter radius of circle: ";
  cin >> radius;

 
  double area = calculateArea(radius); 
  
  cout << "Area = " << area;
  
  return 0;
}

38 ) Check whether the string is palindrome or not


#include <iostream>
#include <string>
using namespace std;


bool isPalindrome(string str) {


  int i = 0;
  int j = str.length() - 1;
  
  while(i < j) {

    if(str[i] != str[j])
      return false;
    i++;
    j--;
  }

  return true;
}

int main() {
  string str;

  cout << "Enter a string: ";
  cin >> str;

  if(isPalindrome(str)) {
   cout << str << " is Palindrome"; 
  }
  else {
    cout << str << " is not Palindrome";
  }

  return 0;
}


39 ) Check whether the string is palindrome or not



#include <iostream>
using namespace std;

int main() {
  int n, m;
  cout << "Enter number of rows and columns of matrix: ";
  cin >> n >> m;
  
  int mat[n][m];
  
  cout << "Enter elements of matrix:" << endl;
  
  for(int i=0; i<n; i++) {
    for(int j=0; j<m; j++) {
      cin >> mat[i][j];
    }
  }
  
  int d1 = 0, d2 = 0;
  
  for(int i=0; i<n; i++) {
    for(int j=0; j<m; j++) {
      if(i==j)
        d1 += mat[i][j];
      if(i+j == n-1)
        d2 += mat[i][j];
    }
  }
  
  cout << "Sum of Primary Diagonal: " << d1 << endl;
  cout << "Sum of Secondary Diagonal: " << d2 << endl;

  return 0;
}


40 ) Person, Student and Teacher classes with get/set member functions:


#include <iostream>
#include <string>
using namespace std;

class Person {
private:
    string name;
    int age;
    string gender;

public:
    // Constructors
    Person() : age(0) {}
    Person(string n, int a, string g) : name(n), age(a), gender(g) {}

    // Getter and setter functions
    void setName(string n) {
        name = n;
    }
    string getName() const {
        return name;
    }

    void setAge(int a) {
        age = a;
    }
    int getAge() const {
        return age;
    }

    void setGender(string g) {
        gender = g;
    }
    string getGender() const {
        return gender;
    }
};

class Student : public Person {
private:
    int rollNo;
    string studentClass;

public:
    // Constructors
    Student() : rollNo(0) {}
    Student(string n, int a, string g, int r, string c) : Person(n, a, g), rollNo(r), studentClass(c) {}

    // Getter and setter functions for Student class
    void setRollNo(int r) {
        rollNo = r;
    }
    int getRollNo() const {
        return rollNo;
    }

    void setClass(string c) {
        studentClass = c;
    }
    string getClass() const {
        return studentClass;
    }
};

class Teacher : public Person {
private:
    string subject;
    double salary;

public:
    // Constructors
    Teacher() : salary(0.0) {}
    Teacher(string n, int a, string g, string s, double sal) : Person(n, a, g), subject(s), salary(sal) {}

    // Getter and setter functions for Teacher class
    void setSubject(string s) {
        subject = s;
    }
    string getSubject() const {
        return subject;
    }

    void setSalary(double sal) {
        salary = sal;
    }
    double getSalary() const {
        return salary;
    }
};

int main() {
    Student s1("John", 16, "Male", 15, "X");
    Teacher t1("Jane", 40, "Female", "History", 35000.0);

    // Display student information
    cout << "Student Information:" << endl;
    cout << "Name: " << s1.getName() << endl;
    cout << "Age: " << s1.getAge() << endl;
    cout << "Gender: " << s1.getGender() << endl;
    cout << "Roll No: " << s1.getRollNo() << endl;
    cout << "Class: " << s1.getClass() << endl;

    // Display teacher information
    cout << "\nTeacher Information:" << endl;
    cout << "Name: " << t1.getName() << endl;
    cout << "Age: " << t1.getAge() << endl;
    cout << "Gender: " << t1.getGender() << endl;
    cout << "Subject: " << t1.getSubject() << endl;
    cout << "Salary: $" << t1.getSalary() << endl;

    return 0;
}


41 )  Create a base class called Shape with data members for height and width. Derive two 
classes Rectangle and Triangle from the base class. Write member functions to calculate the 
area and perimeter of each class.


#include <iostream>
#include <cmath>  // Include this header for the 'sqrt' function
using namespace std;

class Shape {
protected:
    double height;
    double width;

public:
    // Constructors
    Shape() : height(0.0), width(0.0) {}
    Shape(double h, double w) : height(h), width(w) {}

    // Virtual functions for area and perimeter
    virtual double calculateArea() const = 0;
    virtual double calculatePerimeter() const = 0;
};

class Rectangle : public Shape {
public:
    // Constructors
    Rectangle() : Shape() {}
    Rectangle(double h, double w) : Shape(h, w) {}

    // Override virtual functions for Rectangle
    double calculateArea() const override {
        return height * width;
    }

    double calculatePerimeter() const override {
        return 2 * (height + width);
    }
};

class Triangle : public Shape {
public:
    // Constructors
    Triangle() : Shape() {}
    Triangle(double h, double w) : Shape(h, w) {}

    // Override virtual functions for Triangle
    double calculateArea() const override {
        return 0.5 * height * width;
    }

    double calculatePerimeter() const override {
        // Assuming it's an isosceles triangle for simplicity
        double hypotenuse = sqrt(height * height + 0.25 * width * width);
        return height + width + hypotenuse;
    }
};

int main() {
    Rectangle rectangle(5.0, 3.0);
    Triangle triangle(4.0, 6.0);

    // Display rectangle information
    cout << "Rectangle Information:" << endl;
    cout << "Area: " << rectangle.calculateArea() << endl;
    cout << "Perimeter: " << rectangle.calculatePerimeter() << endl;

    // Display triangle information
    cout << "\nTriangle Information:" << endl;
    cout << "Area: " << triangle.calculateArea() << endl;
    cout << "Perimeter: " << triangle.calculatePerimeter() << endl;

    return 0;
}



42 ) Create a base class called Animal with data members for name, species, and age. Derive 
two classes Cat and Dog from the base class. The Cat class should have additional data 
members for color and breed, while the Dog class should have additional data members for 
weight and breed. Write member functions to get and set the data members for each class.


#include <iostream>
#include <string>
using namespace std;

class Animal {
protected:
    string name;
    string species;
    int age;

public:
    // Constructors
    Animal() : age(0) {}
    Animal(string n, string s, int a) : name(n), species(s), age(a) {}

    // Getter and setter functions
    void setName(string n) {
        name = n;
    }
    string getName() const {
        return name;
    }

    void setSpecies(string s) {
        species = s;
    }
    string getSpecies() const {
        return species;
    }

    void setAge(int a) {
        age = a;
    }
    int getAge() const {
        return age;
    }
};

class Cat : public Animal {
private:
    string color;
    string breed;

public:
    // Constructors
    Cat() : Animal() {}
    Cat(string n, string s, int a, string c, string b) : Animal(n, s, a), color(c), breed(b) {}

    // Getter and setter functions for Cat class
    void setColor(string c) {
        color = c;
    }
    string getColor() const {
        return color;
    }

    void setBreed(string b) {
        breed = b;
    }
    string getBreed() const {
        return breed;
    }
};

class Dog : public Animal {
private:
    double weight;
    string breed;

public:
    // Constructors
    Dog() : Animal(), weight(0.0) {}
    Dog(string n, string s, int a, double w, string b) : Animal(n, s, a), weight(w), breed(b) {}

    // Getter and setter functions for Dog class
    void setWeight(double w) {
        weight = w;
    }
    double getWeight() const {
        return weight;
    }

    void setBreed(string b) {
        breed = b;
    }
    string getBreed() const {
        return breed;
    }
};

int main() {
    Cat cat1("Whiskers", "Feline", 3, "Gray", "Persian");
    Dog dog1("Buddy", "Canine", 2, 15.5, "Labrador");

    // Display cat information
    cout << "Cat Information:" << endl;
    cout << "Name: " << cat1.getName() << endl;
    cout << "Species: " << cat1.getSpecies() << endl;
    cout << "Age: " << cat1.getAge() << endl;
    cout << "Color: " << cat1.getColor() << endl;
    cout << "Breed: " << cat1.getBreed() << endl;

    // Display dog information
    cout << "\nDog Information:" << endl;
    cout << "Name: " << dog1.getName() << endl;
    cout << "Species: " << dog1.getSpecies() << endl;
    cout << "Age: " << dog1.getAge() << endl;
    cout << "Weight: " << dog1.getWeight() << " kg" << endl;
    cout << "Breed: " << dog1.getBreed() << endl;

    return 0;
}


43 )  Create a base class called Vehicle with data members for make, model, and year. Derive 
two classes Car and Truck from the base class. The Car class should have additional data 
members for seating capacity and fuel type, while the Truck class should have additional data 
members for payload capacity and towing capacity. Write member functions to get and set the 
data members for each class.


#include <iostream>
#include <string>
using namespace std;

class Vehicle {
protected:
    string make;
    string model;
    int year;

public:
    // Constructors
    Vehicle() : year(0) {}
    Vehicle(string mk, string mdl, int yr) : make(mk), model(mdl), year(yr) {}

    // Getter and setter functions
    void setMake(string mk) {
        make = mk;
    }
    string getMake() const {
        return make;
    }

    void setModel(string mdl) {
        model = mdl;
    }
    string getModel() const {
        return model;
    }

    void setYear(int yr) {
        year = yr;
    }
    int getYear() const {
        return year;
    }
};

class Car : public Vehicle {
private:
    int seatingCapacity;
    string fuelType;

public:
    // Constructors
    Car() : Vehicle(), seatingCapacity(0) {}
    Car(string mk, string mdl, int yr, int seats, string fuel) : Vehicle(mk, mdl, yr), seatingCapacity(seats), fuelType(fuel) {}

    // Getter and setter functions for Car class
    void setSeatingCapacity(int seats) {
        seatingCapacity = seats;
    }
    int getSeatingCapacity() const {
        return seatingCapacity;
    }

    void setFuelType(string fuel) {
        fuelType = fuel;
    }
    string getFuelType() const {
        return fuelType;
    }
};

class Truck : public Vehicle {
private:
    double payloadCapacity;
    double towingCapacity;

public:
    // Constructors
    Truck() : Vehicle(), payloadCapacity(0.0), towingCapacity(0.0) {}
    Truck(string mk, string mdl, int yr, double payload, double towing) : Vehicle(mk, mdl, yr), payloadCapacity(payload), towingCapacity(towing) {}

    // Getter and setter functions for Truck class
    void setPayloadCapacity(double payload) {
        payloadCapacity = payload;
    }
    double getPayloadCapacity() const {
        return payloadCapacity;
    }

    void setTowingCapacity(double towing) {
        towingCapacity = towing;
    }
    double getTowingCapacity() const {
        return towingCapacity;
    }
};

int main() {
    Car car1("Toyota", "Camry", 2020, 5, "Gasoline");
    Truck truck1("Ford", "F-150", 2021, 1500.0, 8000.0);

    // Display car information
    cout << "Car Information:" << endl;
    cout << "Make: " << car1.getMake() << endl;
    cout << "Model: " << car1.getModel() << endl;
    cout << "Year: " << car1.getYear() << endl;
    cout << "Seating Capacity: " << car1.getSeatingCapacity() << endl;
    cout << "Fuel Type: " << car1.getFuelType() << endl;

    // Display truck information
    cout << "\nTruck Information:" << endl;
    cout << "Make: " << truck1.getMake() << endl;
    cout << "Model: " << truck1.getModel() << endl;
    cout << "Year: " << truck1.getYear() << endl;
    cout << "Payload Capacity: " << truck1.getPayloadCapacity() << " lbs" << endl;
    cout << "Towing Capacity: " << truck1.getTowingCapacity() << " lbs" << endl;

    return 0;
}


44 ) Create a base class called Employee with data members for name, id, and salary. Derive 
two classes Manager and Engineer from the base class. The Manager class should have 
additional data members for department and bonus, while the Engineer class should have 
additional data members for specialty and hours. Write member functions to get and set the 
data members for each class.


#include <iostream>
#include <string>
using namespace std;

class Employee {
protected:
    string name;
    int id;
    double salary;

public:
    // Constructors
    Employee() : id(0), salary(0.0) {}
    Employee(string n, int i, double s) : name(n), id(i), salary(s) {}

    // Getter and setter functions
    void setName(string n) {
        name = n;
    }
    string getName() const {
        return name;
    }

    void setId(int i) {
        id = i;
    }
    int getId() const {
        return id;
    }

    void setSalary(double s) {
        salary = s;
    }
    double getSalary() const {
        return salary;
    }
};

class Manager : public Employee {
private:
    string department;
    double bonus;

public:
    // Constructors
    Manager() : Employee(), bonus(0.0) {}
    Manager(string n, int i, double s, string dept, double b) : Employee(n, i, s), department(dept), bonus(b) {}

    // Getter and setter functions for Manager class
    void setDepartment(string dept) {
        department = dept;
    }
    string getDepartment() const {
        return department;
    }

    void setBonus(double b) {
        bonus = b;
    }
    double getBonus() const {
        return bonus;
    }
};

class Engineer : public Employee {
private:
    string specialty;
    int hours;

public:
    // Constructors
    Engineer() : Employee(), hours(0) {}
    Engineer(string n, int i, double s, string spec, int h) : Employee(n, i, s), specialty(spec), hours(h) {}

    // Getter and setter functions for Engineer class
    void setSpecialty(string spec) {
        specialty = spec;
    }
    string getSpecialty() const {
        return specialty;
    }

    void setHours(int h) {
        hours = h;
    }
    int getHours() const {
        return hours;
    }
};

int main() {
    Manager manager1("John Doe", 101, 80000.0, "Marketing", 5000.0);
    Engineer engineer1("Jane Smith", 201, 70000.0, "Software", 40);

    // Display manager information
    cout << "Manager Information:" << endl;
    cout << "Name: " << manager1.getName() << endl;
    cout << "ID: " << manager1.getId() << endl;
    cout << "Salary: $" << manager1.getSalary() << endl;
    cout << "Department: " << manager1.getDepartment() << endl;
    cout << "Bonus: $" << manager1.getBonus() << endl;

    // Display engineer information
    cout << "\nEngineer Information:" << endl;
    cout << "Name: " << engineer1.getName() << endl;
    cout << "ID: " << engineer1.getId() << endl;
    cout << "Salary: $" << engineer1.getSalary() << endl;
    cout << "Specialty: " << engineer1.getSpecialty() << endl;
    cout << "Hours: " << engineer1.getHours() << " hours/week" << endl;

    return 0;
}


45 ) Create a base class called Shape with a virtual function area(). Derive two classes 
Rectangle and Circle from the base class. Implement the area() function for each class.


#include <iostream>
using namespace std;

class Shape {
  public:
    virtual double area() = 0; 
};

class Rectangle: public Shape {
  private:
    double length;
    double breadth;

  public:
    Rectangle(double l, double b) {
      length = l;
      breadth = b;
    }

    double area() {
      return length * breadth;
    }
};

class Circle: public Shape {
  private: 
   double radius;

  public:
    Circle(double r) {
      radius = r;
    }

    double area() {
      return 3.14 * radius * radius;
    }
};

int main() {
  Rectangle r(5, 3); 
  Circle c(4);

  Shape *s1 = &r;
  Shape *s2 = &c;

  cout << "Rectangle area: " << s1->area() << endl; 
  cout << "Circle area: " << s2->area() << endl;
  
  return 0;
}


46 ) Create a base class called Animal with a virtual function speak(). Derive two classes Cat 
and Dog from the base class. Implement the speak() function for each class


#include <iostream>
using namespace std;

class Animal {
  public: 
    virtual void speak() = 0;
};

class Dog : public Animal {
  public:
    void speak() {
      cout << "Woof woof!!" << endl; 
    }
};

class Cat : public Animal {
 public:
  void speak() {
    cout << "Meow meow!!" << endl;
  }  
};

int main() {
  Dog d;
  Cat c;

  Animal *a1 = &d;
  Animal *a2 = &c;

  a1->speak();
  a2->speak();

  return 0;
}

47 ) Create a base class called Employee with a virtual function calculatePay(). Derive two 
classes Manager and Engineer from the base class. Implement the calculatePay() function for 
each class.


#include <iostream>
using namespace std;

class Employee {
  public:
   virtual double calculatePay() = 0;    
};

class Manager : public Employee {
 private:
   double basicPay;

 public:
   Manager(double basic) {
     basicPay = basic;  
   }
   double calculatePay() {
     return basicPay;
   }
};

class Engineer : public Employee {
 private:
   double basicPay;
   double allowance;

 public:
  Engineer(double basic, double allow) {
    basicPay = basic;
    allowance = allow;
  }
  
  double calculatePay() {
    return basicPay + allowance; 
  }
};

int main() {
  Manager m(50000);
  Engineer e(30000, 4000);

  Employee* emp1 = &m;
  Employee* emp2 = &e;

  cout << "Manager's pay: " << emp1->calculatePay() << endl; 
  cout << "Engineer's pay: " << emp2->calculatePay() << endl;

  return 0;  
}


48 ) Create a base class called Vehicle with a virtual function drive(). Derive two classes Car 
and Truck from the base class. Implement the drive() function for each class.


#include <iostream>
using namespace std;

class Vehicle {
  public:
    virtual void drive() = 0; 
};

class Car: public Vehicle {
  public:
    void drive() {
      cout << "Driving the car" << endl;
    }
};

class Truck: public Vehicle {
  public:
    void drive() {
      cout << "Driving the truck" << endl;
    }
};

int main() {
  Car c;
  Truck t;

  Vehicle *v1 = &c;
  Vehicle *v2 = &t;

  v1->drive();
  v2->drive();
  
  return 0;
}

49 ) Create a base class called Shape with virtual functions area() and perimeter(). Derive two 
classes Rectangle and Triangle from the base class. Implement the area() and perimeter() 
functions for each class.


#include <iostream>
using namespace std;

class Shape {
  public:
    virtual double area() = 0;
    virtual double perimeter() = 0;
};

class Rectangle: public Shape {
  private:
    double length;
    double breadth;

  public:
    Rectangle(double l, double b) {
      length = l;
      breadth = b;
    }

    double area() {
      return length * breadth; 
    }

    double perimeter() {
      return 2 * (length + breadth);
    }
};

class Triangle: public Shape {
  private:
    double a, b, c;
  
  public:
    Triangle(double x, double y, double z) {
      a = x;
      b = y; 
      c = z;
    }

    double area() {
      double s = (a + b + c) / 2;
      return sqrt(s * (s - a) * (s - b) * (s - c));
    }

    double perimeter() {
      return a + b + c;
    }
};

int main() {
  Rectangle r(4, 5); 
  Triangle t(3, 4, 5);

  Shape *s1 = &r;
  Shape *s2 = &t;

  cout << "Rectangle area: " << s1->area() << endl;
  cout << "Rectangle perimeter: " << s1->perimeter() << endl;

  cout << "Triangle area: " << s2->area() << endl;
  cout << "Triangle perimeter: " << s2->perimeter() << endl;
  
  return 0;
}


50 ) Create a base class called Animal with a virtual function move(). Derive two classes Bird
and Fish from the base class. Implement the move() function for each class.


#include <iostream>
using namespace std;

class Animal {
  public:
    virtual void move() = 0;  
};

class Bird : public Animal {
  public:
    void move() {
      cout << "Flying in the sky" << endl; 
    }
};

class Fish : public Animal { 
 public:
  void move() {
    cout << "Swimming under water" << endl;  
  }
};

int main() {
  
  Bird b;
  Fish f;

  Animal *a1 = &b;
  Animal *a2 = &f;

  a1->move(); //calls Bird's implementation
  a2->move(); //calls Fish's implementation

  return 0;
}

51 ) Create a base class called Person with a virtual function greet(). Derive two classes 
Student and Teacher from the base class. Implement the greet() function for each class.


#include <iostream>
using namespace std;

class Person {
 public:
  virtual void greet() = 0; 
};

class Student : public Person {
 public:
  void greet() {
    cout << "Hello, I am a student." << endl; 
  }
};

class Teacher : public Person {
 public:
  void greet() {
    cout << "Hello, I am a teacher." << endl;
  }
};

int main() {

  Student s;
  Teacher t;

  Person *p1 = &s;
  Person *p2 = &t;

  p1->greet();
  p2->greet();

  return 0;
}


52 ) Create a base class called Shape with virtual functions area() and volume(). Derive two 
classes Sphere and Cylinder from the base class. Implement the area() and volume() functions 
for each class.


#include <iostream>
using namespace std;

class Shape {
  public:
    virtual double area() = 0;
    virtual double volume() = 0;  
};

class Sphere: public Shape {
  private:
    double radius;
    
  public:
    Sphere(double r) {
      radius = r;
    }
    
    double area() {
      return 4*3.14*radius*radius;
    }
    
    double volume() {
      return 4/3*3.14*radius*radius*radius;
    }
};

class Cylinder: public Shape {
  private:
    double radius; 
    double height;
    
  public:
    Cylinder(double r, double h) {
      radius = r;
      height = h;
    }

    double area() {
      return 2*3.14*radius*(radius + height);  
    }

    double volume() {
      return 3.14*radius*radius*height;
    }
};  

int main() {

  Sphere s(5);
  Cylinder c(3, 4);
  
  Shape *sh1 = &s;
  Shape *sh2 = &c;
  
  cout << sh1->area() << endl;
  cout << sh1->volume() << endl;
  
  cout << sh2->area() << endl;
  cout << sh2->volume() << endl;

  return 0;
}

53 ) Create a base class called Animal with a virtual function eat(). Derive two classes 
Herbivore and Carnivore from the base class. Implement the eat() function for each class.


#include <iostream>
using namespace std;

class Animal {
  public:
    virtual void eat() = 0;  
};

class Herbivore : public Animal {
  public: 
    void eat() {
      cout << "Eating plants!" << endl;
    }
};

class Carnivore : public Animal {
  public:
    void eat() {
      cout << "Eating meat!" << endl; 
    }
};

int main() {

  Herbivore h;
  Carnivore c;

  Animal* a1 = &h;
  Animal* a2 = &c;

  a1->eat(); 
  a2->eat();

  return 0;
}

54 )  Create a base class called Person with a virtual function work(). Derive two classes 
Employee and Manager from the base class. Implement the work() function for each class


#include <iostream>
using namespace std;

class Person {
  public:
    virtual void work() = 0; 
};

class Employee: public Person {
  public:
    void work() {
      cout << "Writing code, testing, fixing bugs" << endl; 
    }  
};

class Manager: public Person {
 public:
  void work() {
    cout << "Organizing work, managing teams, scheduling tasks" << endl;
  }
};

int main() {
  
  Employee e;
  Manager m;

  Person* p1 = &e;
  Person* p2 = &m;

  p1->work();
  p2->work();
  
  return 0;
}



55 ) Write a program to read in two integers and perform the following operations on them: addition, subtraction, multiplication, division, and modulo. in c++


#include <iostream>
using namespace std;

int main() {
  int num1, num2;
  
  cout << "Enter first integer: "; 
  cin >> num1;

  cout << "Enter second integer: ";
  cin >> num2;

  int sum = num1 + num2;
  int diff = num1 - num2; 
  int prod = num1 * num2;
  float quot = float(num1) / num2;
  int mod = num1 % num2;

  cout << "Sum: " << sum << endl;
  cout << "Difference: " << diff << endl;
  cout << "Product: " << prod << endl;  
  cout << "Quotient: " << quot << endl;
  cout << "Modulo: " << mod << endl;

  return 0;
}


56 ) Program to determine the integer is odd or even

#include <iostream>
using namespace std;

int main() {
  int num;
  cout << "Enter an integer: ";
  cin >> num;

  if(num % 2 == 0) {
    cout << num << " is even."; 
  }
  else {
    cout << num << " is odd.";  
  }

  return 0;
}


57 ) Program to compute the average of three integers


#include <iostream>
using namespace std;

int main() {
  int num1, num2, num3;
  float average;
  
  cout << "Enter three integers: ";
  cin >> num1 >> num2 >> num3;

  average = (num1 + num2 + num3) / 3.0;

  cout << "Average of " << num1 << ", " << num2 
       << " and " << num3 << " is: " << average;

  return 0;
}


58 ) Program to check two numbers are equal or not


#include <iostream>
using namespace std;

int main() {
  float num1, num2;
  
  cout << "Enter first number: ";
  cin >> num1;

  cout << "Enter second number: "; 
  cin >> num2;

  if(num1 == num2) {
    cout << num1 << " and " << num2 << " are equal.";
  }
  else {
    cout << num1 << " and " << num2 << " are not equal."; 
  }

  return 0;
}

59 ) Write a program to read in two Floating numbers and perform the following operations on them: addition, subtraction, multiplication, division, and modulo


#include <iostream>
using namespace std;

int main() {
  float num1, num2;
  float sum, diff, prod, quot, mod;

  cout << "Enter first number: ";
  cin >> num1;

  cout << "Enter second number: ";
  cin >> num2;

  sum = num1 + num2;
  diff = num1 - num2;
  prod = num1 * num2;
  quot = num1 / num2;
  mod = fmod(num1, num2);

  cout << "Sum: " << sum << endl;
  cout << "Difference: " << diff << endl;
  cout << "Product: " << prod << endl;
  cout << "Quotient: " << quot << endl;
  cout << "Modulo: " << mod << endl;

  return 0;  
}


60 )  Check whether the number is perfect or not

#include <iostream>
using namespace std;

int main() {

  int num, sum = 0, i;
  
  cout << "Enter a number: ";
  cin >> num;

  for(i=1; i<num; i++) {
    if(num % i == 0) {
      sum += i; 
    }
  }
  
  if(sum == num)
    cout << num << " is a perfect number."; 
  else
    cout << num << " is not a perfect number.";  

  return 0;
}

61 ) Harshad number

#include <iostream>
using namespace std;

int main() {
  int num, originalNum, remainder, sum=0;

  cout << "Enter a number: ";
  cin >> num;
  
  originalNum = num;

  // Calculate sum of digits   
  while(num>0) {
    remainder = num%10;
    sum += remainder;
    num = num/10; 
  }

  // Check if number is divisible by sum of digits
  if(originalNum%sum == 0) {
      cout << originalNum << " is a Harshad number.";  
  }
  else {
      cout << originalNum << " is not a Harshad number.";
  }

  return 0;
}

62 )  Happy number


#include <iostream>
#include <math.h>
using namespace std;

int calculateSquareSum(int n) {
  int squareSum = 0;
  
  while(n!=0) {
    squareSum += (n%10) * (n%10);
    n = n/10;
  }
  return squareSum;
}

bool isHappyNumber(int n) {
  int slow, fast;
  slow = n;
  fast = n;
  
  do {
    slow = calculateSquareSum(slow);
    fast = calculateSquareSum(calculateSquareSum(fast));    
  } while(slow!=fast);
  
  if(slow == 1) 
    return true;
  else
    return false;  
}

int main() { 
  int num;
  cout<<"Enter a number: ";
  cin>>num;
  
  if(isHappyNumber(num)) 
    cout<<num<<" is a happy number"; 
  else
    cout<<num<<" is not a happy number";  
  
  return 0;
}

63 ) strong number


#include <iostream>
using namespace std;

int factorial(int num) {
  if(num == 0)
    return 1;
  return num * factorial(num-1); 
}

int main() {
  int num, temp, lastDigitFactorialSum = 0;
  
  cout << "Enter a number: ";
  cin >> num;

  temp = num;

  while(temp > 0) {
    int lastDigit = temp % 10; 
    int fact = factorial(lastDigit);  
    lastDigitFactorialSum += fact;
    temp = temp / 10;
  }

  if(lastDigitFactorialSum == num) {
    cout << num << " is a strong number.";
  }
  else {
    cout << num << " is not a strong number."; 
  }

  return 0;  
}


64 ) buzz number 

#include <iostream>
using namespace std;

bool checkBuzz(int n) {
  int num = n;
  
  while(num > 0) {
    if(num%10 == 7)
      return true;  
    num = num/10;
  }
  return false;
}

int main() {
  int num;
  cout << "Enter a number: ";
  cin >> num;

  if(checkBuzz(num)) {
    cout << num << " is a buzz number"; 
  }
  else {
    cout << num << " is not a buzz number";
  }

  return 0;
}

65 ) . neon number

#include <iostream>
#include <math.h> 

using namespace std;

int main() {
  int num, square, sumOfDigits = 0;

  cout << "Enter a number: ";
  cin >> num;

  // Find the square of the number
  square = num * num;
  
  // Calculate sum of digits of square  
  while (square != 0) {
    sumOfDigits = sumOfDigits + square % 10;
    square = square / 10;
  }

  // Check if sum of digits equals original number
  if (sumOfDigits == num)
    cout << num << " is a Neon Number."; 
  else
    cout << num << " is not a Neon Number.";

  return 0;
}


66 )  abundant number

#include <iostream>
using namespace std;

int main() {
  
  int num, sum = 0;
  
  cout << "Enter a number: ";
  cin >> num;

  for(int i=1; i<num; i++) {
    if(num%i == 0)
      sum += i;
  }

  if(sum > num)
    cout << num << " is an abundant number.";
  else  
    cout << num << " is not an abundant number."; 

  return 0;
}

67 ) . narcissistic number


#include <iostream>
#include <math.h>
using namespace std;

int main() {

  int num, originalNum, digits=0, sum=0; 
  
  cout<<"Enter a number: ";
  cin>>num;

  originalNum = num;
  
  // Count digits  
  int temp = num;
  while(temp != 0) {
    digits++;
    temp = temp/10;
  }
  
  temp = num;
  
  // Calculate sum of power of digits
  while(temp != 0) {
    int remainder = temp%10; 
    sum += pow(remainder, digits);  
    temp = temp/10; 
  }

  if(sum == originalNum) 
    cout<<num<<" is a narcissistic number";
  else
    cout<<num<<" is not a narcissistic number";  

  return 0;
}


68 ) print the pattern
*
**
***
****
*****

#include<iostream>
using namespace std;

int main(){
	int rows;
	cout<<"enter the number of rows : ";
	cin>>rows;
	for(int i=1;i<=rows;i++){
		for(int j=1;j<=i;j++){
			cout<<" * ";
		}
		cout<<endl;
	}
}

69 ) 1. print the pattern
1
22
333
4444
55555

#include<iostream>
using namespace std;

int main(){
	int rows;
	cout<<"enter the number of rows : ";
	cin>>rows;
	for(int i=1;i<=rows;i++){
		for(int j=1;j<=i;j++){
			cout<<i;
		}
		cout<<endl;
	}
}

70 ) Print pascal triangle pattern nested for loop


#include <iostream>
using namespace std;

int main() {
  
  int rows;
  
  cout << "Enter number of rows: ";
  cin >> rows;

  for(int i=1; i<=rows; i++) {
    
    int num = 1;
    
    for(int j=1; j<=i; j++) {
      cout << num << " ";
      num = num * (i - j) / j; 
    }
    
    cout << endl; 
  }

  return 0;
}


71 ) Print diamond pattern with * using nested for loop

#include<iostream>
using namespace std;

int main(){
	int rows;
	cout<<"enter the number of rows : ";
	cin>>rows;
	for(int i=1;i<rows;i++){
		for(int j=1;j<=rows-i;j++){
			cout<<" ";
		}
		for(int k=1;k<=2*i-1;k++){
			cout<<"*";
		}
		cout<<endl;
		}
		for(int i=rows;i>=1;i--){
		    for(int j=1;j<=rows-i;j++){
		        cout<<" ";
		}
		for(int k=1;k<=2*i-1;k++){
			cout<<"*";
		}
		cout<<endl;
		}
		return 0;
		
}


72 ) Write a c++ program to create a class for a bank account with a constructor and a
destructor


method 1 : 

#include <iostream>
using namespace std;

class BankAccount {
  private:
    string name;
    int accountNumber;
    double balance;

  public:
    // Constructor 
    BankAccount(string n, int accNo, double b) {
      name = n;
      accountNumber = accNo;
      balance = b;  
      cout << "Account created for " << name << endl;
    }

    // Destructor
    ~BankAccount() {
      cout << "Account destroyed for " << name << endl;
    }
};

int main() {

  // Create account
  BankAccount acc1 = BankAccount("John Doe", 12345, 5000);
  
  return 0;  
}

method 2 : 

#include <iostream>
#include <string>

class BankAccount {
private:
    std::string accountHolderName;
    double balance;

public:
    // Constructor
    BankAccount(const std::string& name, double initialBalance) : accountHolderName(name), balance(initialBalance) {
        std::cout << "Account created for " << accountHolderName << " with an initial balance of $" << initialBalance << std::endl;
    }

    // Destructor
    ~BankAccount() {
        std::cout << "Account for " << accountHolderName << " is being destroyed." << std::endl;
    }

    // Member function to display account information
    void displayAccountInfo() const {
        std::cout << "Account Holder: " << accountHolderName << std::endl;
        std::cout << "Balance: $" << balance << std::endl;
    }
};

int main() {
    // Creating an instance of the BankAccount class
    BankAccount myAccount("John Doe", 1000.0);

    // Displaying account information
    myAccount.displayAccountInfo();

    // The destructor will be automatically called when the program exits the main function
    return 0;
}


73 ) Write a c++ program to create a class for a car with a constructor and a
destructor

method 1 :

#include <iostream>
using namespace std;

class Car {
  private:
    string brand;
    string model;
    int year;

  public:
    // Constructor
    Car(string b, string m, int y) {
      brand = b;
      model = m; 
      year = y;

      cout << "Car " << model << " Created" << endl; 
    }

    // Destructor 
    ~Car() {
      cout << "Car " << model << " Destroyed" << endl;
    }
};

int main() {

  // Create Car
  Car Civic("Honda", "Civic", 2022);

  return 0;  
}

method 2 :

#include <iostream>
#include <string>

using namespace std;

class Car {
private:
    string make;
    string model;
    int year;

public:
    Car(const string& carMake, const string& carModel, int carYear) : make(carMake), model(carModel), year(carYear) {
        cout << "A new car is created: " << year << " " << make << " " << model << endl;
    }

    ~Car() {
        cout << "The car is being destroyed: " << year << " " << make << " " << model << endl;
    }

    void displayCarInfo() const {
        cout << "Car: " << year << " " << make << " " << model << endl;
    }
};

int main() {
    Car myCar("Toyota", "Camry", 2022);
    myCar.displayCarInfo();
    return 0;
}


74 ) Write a c++ program to create a class for a rectangle with a constructor and a
destructor

method 1 : 

#include <iostream>
using namespace std;

class Rectangle {
  private:
    double length;
    double breadth;

  public:
    // Constructor
    Rectangle(double l=1, double b=1) {
      length = l;  
      breadth = b;
      cout << "Rectangle created!" << endl;
    }

    // Destructor
    ~Rectangle() {
      cout << "Rectangle destroyed!" << endl;
    }    
      
    double area() {
      return length * breadth; 
    }
};

int main() {
  Rectangle r(12, 5);
  
  double a = r.area();
  
  cout << "Area: " << a << endl;
  
  return 0;
}

method 2 : 

#include <iostream>

using namespace std;

class Rectangle {
private:
    double length;
    double width;

public:
    Rectangle(double len, double wid) : length(len), width(wid) {
        cout << "Rectangle created with length: " << length << " and width: " << width << endl;
    }

    ~Rectangle() {
        cout << "Rectangle destroyed with length: " << length << " and width: " << width << endl;
    }

    void displayRectangleInfo() const {
        cout << "Rectangle: length = " << length << ", width = " << width << endl;
    }
};

int main() {
    Rectangle myRectangle(5.0, 3.0);
    myRectangle.displayRectangleInfo();
    return 0;
}


75 ) Write a c++ program to create a class for a book with a constructor and a
destructor


#include <iostream>
#include <string>

using namespace std;

class Book {
private:
    string title;
    string author;

public:
    Book(const string& bookTitle, const string& bookAuthor) : title(bookTitle), author(bookAuthor) {
        cout << "Book created: " << title << " by " << author << endl;
    }

    ~Book() {
        cout << "Book destroyed: " << title << " by " << author << endl;
    }

    void displayBookInfo() const {
        cout << "Book: " << title << " by " << author << endl;
    }
};

int main() {
    Book myBook("The Great Gatsby", "F. Scott Fitzgerald");
    myBook.displayBookInfo();
    return 0;
}


76 ) Write a c++ program to create a class for student with a constructor and a
destructor

#include <iostream>
#include <string>

using namespace std;

class Student {
private:
    string name;
    int studentId;

public:
    Student(const string& studentName, int id) : name(studentName), studentId(id) {
        cout << "Student created: " << name << " (ID: " << studentId << ")" << endl;
    }

    ~Student() {
        cout << "Student destroyed: " << name << " (ID: " << studentId << ")" << endl;
    }

    void displayStudentInfo() const {
        cout << "Student: " << name << " (ID: " << studentId << ")" << endl;
    }
};

int main() {
    Student myStudent("John Doe", 12345);
    myStudent.displayStudentInfo();
    return 0;
}


77 )  Write a c++ program to overload the ++ operator to increment a variable

#include <iostream>

using namespace std;

class Counter {
private:
    int count;

public:
    Counter() : count(0) {}

    Counter operator++() {
        ++count;
        return *this;
    }

    Counter operator++(int) {
        Counter temp = *this;
        ++count;
        return temp;
    }

    void display() {
        cout << "Count: " << count << endl;
    }
};

int main() {
    Counter myCounter;

    ++myCounter;
    myCounter.display();

    myCounter++;
    myCounter.display();

    return 0;
}


78 ) Write a c++ program to overload the + operator to add two variables


#include <iostream>
using namespace std;

class Adder {
private:
    int value;

public:
    Adder() : value(0) {}

    Adder operator+(const Adder& other) {
        Adder result;
        result.value = this->value + other.value;
        return result;
    }

    void setValue(int val) {
        value = val;
    }

    void display() {
        cout << "Value: " << value << endl;
    }
};

int main() {
    Adder num1, num2, sum;

    cout << "Enter the first number: ";
    int input1;
    cin >> input1;
    num1.setValue(input1);

    cout << "Enter the second number: ";
    int input2;
    cin >> input2;
    num2.setValue(input2);

    sum = num1 + num2;

    cout << "Sum of the two numbers: ";
    sum.display();

    return 0;
}

79 ) Write a c++ program to overload the << operator to print contents of a user
defined class

#include <iostream>

using namespace std;

class MyClass {
private:
    int data;

public:
    MyClass() : data(0) {}

    void setData(int value) {
        data = value;
    }

    
    friend ostream& operator<<(ostream& os, const MyClass& obj) {
        os << "Data: " << obj.data;
        return os;
    }
};

int main() {
    MyClass obj;

    cout << "Enter data for the object: ";
    int inputData;
    cin >> inputData;

    obj.setData(inputData);

    cout << "Object details: " << obj << endl;

    return 0;
}

80 ) Write a c++ program to overload the == operator to compare two objects of a
user defined class

#include <iostream>

using namespace std;

class MyClass {
private:
    int data;

public:
    MyClass() : data(0) {}

    void setData(int value) {
        data = value;
    }

    
    bool operator==(const MyClass& obj) const {
        return data == obj.data;
    }
};

int main() {
    MyClass obj1, obj2;

    cout << "Enter data for the first object: ";
    int inputData1;
    cin >> inputData1;

    obj1.setData(inputData1);

    cout << "Enter data for the second object: ";
    int inputData2;
    cin >> inputData2;

    obj2.setData(inputData2);

    if (obj1 == obj2) {
        cout << "Both objects have the same data." << endl;
    } else {
        cout << "Objects have different data." << endl;
    }

    return 0;
}

81 ) Write a c++ program to overload the * operator to multiply two matrices


#include <iostream>
#include <vector>

using namespace std;

class Matrix {
private:
    vector<vector<int>> data;
    int rows, cols;

public:
    Matrix(int r, int c) : rows(r), cols(c), data(r, vector<int>(c, 0)) {}

    Matrix operator*(const Matrix& other) {
        Matrix result(rows, other.cols);

        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < other.cols; ++j) {
                for (int k = 0; k < cols; ++k) {
                    result.data[i][j] += data[i][k] * other.data[k][j];
                }
            }
        }

        return result;
    }

    void setData() {
        cout << "Enter matrix elements row-wise:" << endl;
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                cin >> data[i][j];
            }
        }
    }

    void display() {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                cout << data[i][j] << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    int m, n, p;

    cout << "Enter dimensions of the first matrix (m x n): ";
    cin >> m >> n;
    Matrix matrix1(m, n);
    matrix1.setData();

    cout << "Enter dimensions of the second matrix (n x p): ";
    cin >> n >> p;
    Matrix matrix2(n, p);
    matrix2.setData();

    Matrix result = matrix1 * matrix2;

    cout << "Resultant matrix after multiplication:" << endl;
    result.display();

    return 0;
}

82 ) rite a c++ program to overload the [] operator to access the elements in an array
using index values

#include <iostream>

using namespace std;

class Array {
private:
    int size;
    int* data;

public:
    Array(int s) : size(s), data(new int[s]) {}

    int& operator[](int index) {
        if (index >= 0 && index < size) {
            return data[index];
        } else {
            cerr << "Error: Index out of bounds." << endl;
            exit(1);
        }
    }

    ~Array() {
        delete[] data;
    }
};

int main() {
    int arraySize;

    cout << "Enter the size of the array: ";
    cin >> arraySize;

    Array myArray(arraySize);

    cout << "Enter " << arraySize << " elements for the array:" << endl;
    for (int i = 0; i < arraySize; ++i) {
        cin >> myArray[i];
    }

    cout << "Array elements: ";
    for (int i = 0; i < arraySize; ++i) {
        cout << myArray[i] << " ";
    }
    cout << endl;

    return 0;
}


83 ) Write a c++ program to overload the () to call a function with arguments

#include <iostream>

using namespace std;

class FunctionCaller {
public:
    int operator()(int x, int y) {
        return x + y;
    }
};

int main() {
    FunctionCaller addFunction;

    int arg1, arg2;
    cout << "Enter the first argument: ";
    cin >> arg1;
    cout << "Enter the second argument: ";
    cin >> arg2;

    int result = addFunction(arg1, arg2);

    cout << "Result of the function call: " << result << endl;

    return 0;
}

84 ) rite a c++ program to overload the – operator to subtract two variables


#include <iostream>

using namespace std;

class Subtractor {
private:
    int value;

public:
    Subtractor(int initial) : value(initial) {}

    Subtractor operator-(const Subtractor& other) {
        Subtractor result(value - other.value);
        return result;
    }

    int getValue() const {
        return value;
    }
};

int main() {
    int firstValue, secondValue;

    cout << "Enter the first value: ";
    cin >> firstValue;

    cout << "Enter the second value: ";
    cin >> secondValue;

    Subtractor firstOperand(firstValue);
    Subtractor secondOperand(secondValue);

    Subtractor result = firstOperand - secondOperand;

    cout << "Result of subtraction: " << result.getValue() << endl;

    return 0;
}


85 ) write a c++ program to overload a function to add two integer numbers and two
floating point number separately

#include <iostream>

using namespace std;

int add(int a, int b) {
    return a + b;
}

float add(float x, float y) {
    return x + y;
}

int main() {
    int int1, int2;
    float float1, float2;

    cout << "Enter two integers for addition: ";
    cin >> int1 >> int2;

    cout << "Enter two floating-point numbers for addition: ";
    cin >> float1 >> float2;

    int intSum = add(int1, int2);
    float floatSum = add(float1, float2);

    cout << "Sum of integers: " << intSum << endl;
    cout << "Sum of floating-point numbers: " << floatSum << endl;

    return 0;
}

86 ) Write a c++ program to overload the += operator to add two objects of a user
defined class

#include <iostream>

using namespace std;

class MyClass {
private:
    int value;

public:
    MyClass(int initial) : value(initial) {}

    MyClass& operator+=(const MyClass& other) {
        value += other.value;
        return *this;
    }

    int getValue() const {
        return value;
    }
};

int main() {
    int initialValue1, initialValue2;

    cout << "Enter the initial value for the first object: ";
    cin >> initialValue1;
    MyClass obj1(initialValue1);

    cout << "Enter the initial value for the second object: ";
    cin >> initialValue2;
    MyClass obj2(initialValue2);

    obj1 += obj2;

    cout << "Value of the first object after += operation: " << obj1.getValue() << endl;

    return 0;
}

87 ) write a c++ program to overload a function to find the maximum value from two
integer numbers and two floating point number, and two characters separately

#include <iostream>

using namespace std;

int findMax(int a, int b) {
    return (a > b) ? a : b;
}

float findMax(float x, float y) {
    return (x > y) ? x : y;
}

char findMax(char ch1, char ch2) {
    return (ch1 > ch2) ? ch1 : ch2;
}

int main() {
    int int1, int2;
    float float1, float2;
    char char1, char2;

    cout << "Enter two integers: ";
    cin >> int1 >> int2;

    cout << "Enter two floating-point numbers: ";
    cin >> float1 >> float2;

    cout << "Enter two characters: ";
    cin >> char1 >> char2;

    int maxInt = findMax(int1, int2);
    float maxFloat = findMax(float1, float2);
    char maxChar = findMax(char1, char2);

    cout << "Maximum of integers: " << maxInt << endl;
    cout << "Maximum of floating-point numbers: " << maxFloat << endl;
    cout << "Maximum of characters: " << maxChar << endl;

    return 0;
}

88 )  write a c++ program to overload a function to concatenate two strings and two
characters arrays separately

#include <iostream>
#include <cstring>

using namespace std;

string concatenate(const string& str1, const string& str2) {
    return str1 + str2;
}

char* concatenate(const char* arr1, const char* arr2) {
    int len1 = strlen(arr1);
    int len2 = strlen(arr2);

    char* result = new char[len1 + len2 + 1];
    
    strcpy(result, arr1);
    strcat(result, arr2);

    return result;
}

int main() {
    string str1, str2;
    cout << "Enter the first string: ";
    getline(cin, str1);

    cout << "Enter the second string: ";
    getline(cin, str2);

    string concatenatedString = concatenate(str1, str2);
    cout << "Concatenated string: " << concatenatedString << endl;

    char arr1[50], arr2[50];
    cout << "Enter the first character array: ";
    cin >> arr1;

    cout << "Enter the second character array: ";
    cin >> arr2;

    char* concatenatedArray = concatenate(arr1, arr2);
    cout << "Concatenated character array: " << concatenatedArray << endl;

    // Deallocate memory for the concatenated character array
    delete[] concatenatedArray;

    return 0;
}

89 ) write a c++ program to overload a function to calculate the sum of two matrices
and two arrays separately

#include <iostream>

using namespace std;

const int MAX_SIZE = 100;

void addMatrices(int mat1[][MAX_SIZE], int mat2[][MAX_SIZE], int result[][MAX_SIZE], int rows, int cols) {
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            result[i][j] = mat1[i][j] + mat2[i][j];
        }
    }
}

void addArrays(int arr1[], int arr2[], int result[], int size) {
    for (int i = 0; i < size; ++i) {
        result[i] = arr1[i] + arr2[i];
    }
}

int main() {
    int rows, cols;

    cout << "Enter the number of rows for matrices and array: ";
    cin >> rows;

    cout << "Enter the number of columns for matrices: ";
    cin >> cols;

    int matrix1[MAX_SIZE][MAX_SIZE], matrix2[MAX_SIZE][MAX_SIZE], resultMatrix[MAX_SIZE][MAX_SIZE];
    int array1[MAX_SIZE], array2[MAX_SIZE], resultArray[MAX_SIZE];

    cout << "Enter elements for the first matrix:" << endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cin >> matrix1[i][j];
        }
    }

    cout << "Enter elements for the second matrix:" << endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cin >> matrix2[i][j];
        }
    }

    cout << "Enter elements for the first array:" << endl;
    for (int i = 0; i < rows; ++i) {
        cin >> array1[i];
    }

    cout << "Enter elements for the second array:" << endl;
    for (int i = 0; i < rows; ++i) {
        cin >> array2[i];
    }

    addMatrices(matrix1, matrix2, resultMatrix, rows, cols);
    addArrays(array1, array2, resultArray, rows);

    cout << "Sum of matrices:" << endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cout << resultMatrix[i][j] << " ";
        }
        cout << endl;
    }

    cout << "Sum of arrays:" << endl;
    for (int i = 0; i < rows; ++i) {
        cout << resultArray[i] << " ";
    }
    cout << endl;

    return 0;
}


90 ) write a c++ program to overload a function to print an integer array, a double
array and a character array separately

#include <iostream>

using namespace std;

void printArray(const int arr[], int size) {
    cout << "Integer Array: ";
    for (int i = 0; i < size; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

void printArray(const double arr[], int size) {
    cout << "Double Array: ";
    for (int i = 0; i < size; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

void printArray(const char arr[], int size) {
    cout << "Character Array: ";
    for (int i = 0; i < size; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    const int intSize = 5;
    const int doubleSize = 5;  // Fix: Use 'int' instead of 'const double'
    const int charSize = 5;

    int intArray[intSize];
    double doubleArray[doubleSize];
    char charArray[charSize];

    cout << "Enter " << intSize << " integers for the integer array:" << endl;
    for (int i = 0; i < intSize; ++i) {
        cin >> intArray[i];
    }

    cout << "Enter " << doubleSize << " doubles for the double array:" << endl;
    for (int i = 0; i < doubleSize; ++i) {
        cin >> doubleArray[i];
    }

    cout << "Enter " << charSize << " characters for the character array:" << endl;
    for (int i = 0; i < charSize; ++i) {
        cin >> charArray[i];
    }

    printArray(intArray, intSize);
    printArray(doubleArray, doubleSize);
    printArray(charArray, charSize);

    return 0;
}

91 ) . write a c++ program to overload a function to find a factorial of an integer
number and factorial of a floating-point number separately

#include <iostream>

using namespace std;

unsigned long long factorial(int n) {
    unsigned long long result = 1;
    for (int i = 1; i <= n; ++i) {
        result *= i;
    }
    return result;
}

double factorial(double n) {
    double result = 1.0;
    for (double i = 1.0; i <= n; ++i) {
        result *= i;
    }
    return result;
}

int main() {
    int intNumber;
    double doubleNumber;

    cout << "Enter an integer number: ";
    cin >> intNumber;

    cout << "Enter a floating-point number: ";
    cin >> doubleNumber;

    unsigned long long intFactorial = factorial(intNumber);
    double doubleFactorial = factorial(doubleNumber);

    cout << "Factorial of " << intNumber << " (integer): " << intFactorial << endl;
    cout << "Factorial of " << doubleNumber << " (floating-point): " << doubleFactorial << endl;

    return 0;
}

92 ) write a c++ program to overload a function to sort an integer array and a double
array

#include <iostream>
#include <algorithm>

using namespace std;

void sortArray(int arr[], int size) {
    sort(arr, arr + size);
}

void sortArray(double arr[], int size) {
    sort(arr, arr + size);
}

template <typename T>
void displayArray(const T arr[], int size) {
    for (int i = 0; i < size; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    const int intSize = 5;
    const int doubleSize = 5;

    int intArray[intSize];
    double doubleArray[doubleSize];

    cout << "Enter " << intSize << " integers for the integer array:" << endl;
    for (int i = 0; i < intSize; ++i) {
        cin >> intArray[i];
    }

    cout << "Enter " << doubleSize << " doubles for the double array:" << endl;
    for (int i = 0; i < doubleSize; ++i) {
        cin >> doubleArray[i];
    }

    cout << "\nOriginal Integer Array: ";
    displayArray(intArray, intSize);

    sortArray(intArray, intSize);

    cout << "Sorted Integer Array: ";
    displayArray(intArray, intSize);

    cout << "\nOriginal Double Array: ";
    displayArray(doubleArray, doubleSize);

    sortArray(doubleArray, doubleSize);

    cout << "Sorted Double Array: ";
    displayArray(doubleArray, doubleSize);

    return 0;
}

93 ) write a c++ program to overload a function to calculate the power of an integer
number and power of a floating-point number separately

#include <iostream>
#include <cmath>

using namespace std;

long long int power(int base, int exponent) {
    return static_cast<long long int>(pow(base, exponent));
}

double power(double base, double exponent) {
    return pow(base, exponent);
}

int main() {
    int intBase, intExponent;
    double doubleBase, doubleExponent;

    cout << "Enter an integer base: ";
    cin >> intBase;

    cout << "Enter an integer exponent: ";
    cin >> intExponent;

    cout << "Enter a floating-point base: ";
    cin >> doubleBase;

    cout << "Enter a floating-point exponent: ";
    cin >> doubleExponent;

    long long int intResult = power(intBase, intExponent);
    double doubleResult = power(doubleBase, doubleExponent);

    cout << "Power of " << intBase << " raised to the power of " << intExponent << " (integer): " << intResult << endl;
    cout << "Power of " << doubleBase << " raised to the power of " << doubleExponent << " (floating-point): " << doubleResult << endl;

    return 0;
}

94 ) write a c++ program to overload a function to find an absolute value of an integer
number and absolute value of a floating-point number separately

#include <iostream>
#include <cmath>

using namespace std;

int absoluteValue(int num) {
    return abs(num);
}

double absoluteValue(double num) {
    return abs(num);
}

int main() {
    int intValue;
    double doubleValue;

    cout << "Enter an integer value: ";
    cin >> intValue;

    cout << "Enter a floating-point value: ";
    cin >> doubleValue;

    int absIntValue = absoluteValue(intValue);
    double absDoubleValue = absoluteValue(doubleValue);

    cout << "Absolute value of " << intValue << " (integer): " << absIntValue << endl;
    cout << "Absolute value of " << doubleValue << " (floating-point): " << absDoubleValue << endl;

    return 0;
}

95 ) Write a C++ program to create a pointer to an integer and display its value


#include <iostream>

using namespace std;

int main() {
    int intValue;

    cout << "Enter an integer value: ";
    cin >> intValue;

    int* ptrToInt = &intValue;

    cout << "Value through the pointer: " << *ptrToInt << endl;

    return 0;
}

96 ) Write a C++ program to create a pointer to a float and display its value.

#include <iostream>

using namespace std;

int main() {
    float floatValue;

    cout << "Enter a float value: ";
    cin >> floatValue;

    float* ptrToFloat = &floatValue;

    cout << "Value through the pointer: " << *ptrToFloat << endl;

    return 0;
}

97 ) Write a C++ program to create a pointer to a char and display its value.


#include <iostream>

using namespace std;

int main() {
    char charValue;

    cout << "Enter a char value: ";
    cin >> charValue;

    char* ptrToChar = &charValue;

    cout << "Value through the pointer: " << *ptrToChar << endl;

    return 0;
}

98 ) Write a C++ program to create a pointer to a double and display its value.

#include <iostream>

using namespace std;

int main() {
    double doubleValue;

    cout << "Enter a double value: ";
    cin >> doubleValue;

    double* ptrToDouble = &doubleValue;

    cout << "Value through the pointer: " << *ptrToDouble << endl;

    return 0;
}

99 )  Write a C++ program to create a pointer to a string and display its value.

#include <iostream>
#include <string>

using namespace std;

int main() {
    string stringValue;

    cout << "Enter a string value: ";
    getline(cin, stringValue);  // Using getline to allow input with spaces

    string* ptrToString = &stringValue;

    cout << "Value through the pointer: " << *ptrToString << endl;

    return 0;
}


100 )Write a C++ program to create a pointer to an array of elements and display its
value. 

#include <iostream>

using namespace std;

int main() {
    const int arraySize = 5;
    int intArray[arraySize];

    cout << "Enter " << arraySize << " integer values for the array:" << endl;
    for (int i = 0; i < arraySize; ++i) {
        cout << "Value " << i + 1 << ": ";
        cin >> intArray[i];
    }

    int* ptrToArray = intArray;

    cout << "Values through the pointer: ";
    for (int i = 0; i < arraySize; ++i) {
        cout << *(ptrToArray + i) << " ";  
    }
    cout << endl;

    return 0;
}


101 ) . Write a C++ program to create a pointer to an array of character and display its
value

#include <iostream>

using namespace std;

int main() {
    const int arraySize = 5;
    char charArray[arraySize];

    cout << "Enter " << arraySize << " characters for the array:" << endl;
    for (int i = 0; i < arraySize; ++i) {
        cout << "Character " << i + 1 << ": ";
        cin >> charArray[i];
    }

    char* ptrToArray = charArray;

    cout << "Values through the pointer: ";
    for (int i = 0; i < arraySize; ++i) {
        cout << *(ptrToArray + i) << " ";  
    }
    cout << endl;

    return 0;
}

102 ) Write a C++ program to create a pointer to an array of floats and display its value

#include <iostream>

using namespace std;

int main() {
    const int arraySize = 5;
    float floatArray[arraySize];

    cout << "Enter " << arraySize << " float values for the array:" << endl;
    for (int i = 0; i < arraySize; ++i) {
        cout << "Value " << i + 1 << ": ";
        cin >> floatArray[i];
    }

    float* ptrToArray = floatArray;

    cout << "Values through the pointer: ";
    for (int i = 0; i < arraySize; ++i) {
        cout << *(ptrToArray + i) << " ";  
    }
    cout << endl;

    return 0;
}

103 ) Write a C++ program to create a pointer to an object and display its attributes.

#include <iostream>

using namespace std;

class SampleObject {
public:
    int attribute1;
    float attribute2;

    SampleObject() : attribute1(0), attribute2(0.0) {}

    void displayAttributes() {
        cout << "Attribute 1: " << attribute1 << endl;
        cout << "Attribute 2: " << attribute2 << endl;
    }
};

int main() {
    SampleObject myObject;

    cout << "Enter an integer value for Attribute 1: ";
    cin >> myObject.attribute1;

    cout << "Enter a float value for Attribute 2: ";
    cin >> myObject.attribute2;

    SampleObject* ptrToObject = &myObject;

    cout << "\nAttributes through the pointer:" << endl;
    ptrToObject->displayAttributes();

    return 0;
}


104 ) Write a C++ program to create a pointer to a function and call the function using
the pointer

#include <iostream>

using namespace std;

int add(int a, int b) {
    return a + b;
}

int subtract(int a, int b) {
    return a - b;
}

int main() {
    int (*operationPtr)(int, int);

    int choice;
    cout << "Choose operation (1 for add, 2 for subtract): ";
    cin >> choice;

    if (choice == 1) {
        operationPtr = &add;
    } else if (choice == 2) {
        operationPtr = &subtract;
    } else {
        cout << "Invalid choice!" << endl;
        return 1;
    }

    int operand1, operand2;
    cout << "Enter two integers: ";
    cin >> operand1 >> operand2;

    int result = operationPtr(operand1, operand2);

    cout << "Result: " << result << endl;

    return 0;
}

105 )Create a base class called Shape with data members for height and width. Derive
two classes Rectangle and Triangle from the base class. Write member functions
to calculate the area and perimeter of each class

#include <iostream>

using namespace std;

class Shape {
protected:
    double height;
    double width;

public:
    Shape(double h, double w) : height(h), width(w) {}

    virtual double area() const = 0;
    virtual double perimeter() const = 0;
};

class Rectangle : public Shape {
public:
    Rectangle(double h, double w) : Shape(h, w) {}

    double area() const override {
        return height * width;
    }

    double perimeter() const override {
        return 2 * (height + width);
    }
};

class Triangle : public Shape {
public:
    Triangle(double h, double w) : Shape(h, w) {}

    double area() const override {
        return 0.5 * height * width;
    }

    double perimeter() const override {
        return 2 * width + height;
    }
};

int main() {
    Rectangle rectangle(4, 6);
    cout << "Rectangle Area: " << rectangle.area() << endl;
    cout << "Rectangle Perimeter: " << rectangle.perimeter() << endl;

    Triangle triangle(3, 5);
    cout << "Triangle Area: " << triangle.area() << endl;
    cout << "Triangle Perimeter: " << triangle.perimeter() << endl;

    return 0;
}


106 ) Create a base class called Animal with data members for name, species, and age.
Derive two classes Cat and Dog from the base class. The Cat class should have
additional data members for color and breed, while the Dog class should have
additional data members for weight and breed. Write member functions to get
and set the data members for each class

#include <iostream>
#include <string>

using namespace std;

class Animal {
protected:
    string name;
    string species;
    int age;

public:
    Animal(string _name, string _species, int _age) : name(_name), species(_species), age(_age) {}

    void setName(string _name) { name = _name; }
    string getName() const { return name; }

    void setSpecies(string _species) { species = _species; }
    string getSpecies() const { return species; }

    void setAge(int _age) { age = _age; }
    int getAge() const { return age; }
};

class Cat : public Animal {
private:
    string color;
    string breed;

public:
    Cat(string _name, string _species, int _age, string _color, string _breed)
        : Animal(_name, _species, _age), color(_color), breed(_breed) {}

    void setColor(string _color) { color = _color; }
    string getColor() const { return color; }

    void setBreed(string _breed) { breed = _breed; }
    string getBreed() const { return breed; }
};

class Dog : public Animal {
private:
    double weight;
    string breed;

public:
    Dog(string _name, string _species, int _age, double _weight, string _breed)
        : Animal(_name, _species, _age), weight(_weight), breed(_breed) {}

    void setWeight(double _weight) { weight = _weight; }
    double getWeight() const { return weight; }

    void setBreed(string _breed) { breed = _breed; }
    string getBreed() const { return breed; }
};

int main() {
    Cat myCat("Whiskers", "Cat", 3, "Gray", "Persian");
    Dog myDog("Buddy", "Dog", 5, 25.5, "Golden Retriever");

    cout << "Cat Name: " << myCat.getName() << endl;
    cout << "Cat Color: " << myCat.getColor() << endl;

    cout << "\nDog Name: " << myDog.getName() << endl;
    cout << "Dog Weight: " << myDog.getWeight() << " kg" << endl;

    return 0;
}


107 ) Create a base class called Employee with data members for name, d, and salary
Derive two classes Manager and Engineer from the base class. The Manager class
should have additional data members for department and bonus, while the
Engineer class should have additional data members for specialty and hours.
Write member functions to get and set the data members for each class


#include <iostream>
#include <string>

using namespace std;

class Employee {
protected:
    string name;
    int id;
    double salary;

public:
    Employee(string _name, int _id, double _salary) : name(_name), id(_id), salary(_salary) {}

    void setName(string _name) { name = _name; }
    string getName() const { return name; }

    void setId(int _id) { id = _id; }
    int getId() const { return id; }

    void setSalary(double _salary) { salary = _salary; }
    double getSalary() const { return salary; }
};

class Manager : public Employee {
private:
    string department;
    double bonus;

public:
    Manager(string _name, int _id, double _salary, string _department, double _bonus)
        : Employee(_name, _id, _salary), department(_department), bonus(_bonus) {}

    void setDepartment(string _department) { department = _department; }
    string getDepartment() const { return department; }

    void setBonus(double _bonus) { bonus = _bonus; }
    double getBonus() const { return bonus; }
};

class Engineer : public Employee {
private:
    string specialty;
    int hours;

public:
    Engineer(string _name, int _id, double _salary, string _specialty, int _hours)
        : Employee(_name, _id, _salary), specialty(_specialty), hours(_hours) {}

    void setSpecialty(string _specialty) { specialty = _specialty; }
    string getSpecialty() const { return specialty; }

    void setHours(int _hours) { hours = _hours; }
    int getHours() const { return hours; }
};

int main() {
    Manager myManager("John Doe", 101, 80000.0, "Finance", 5000.0);
    Engineer myEngineer("Alice Smith", 201, 60000.0, "Software Development", 40);

    cout << "Manager Name: " << myManager.getName() << endl;
    cout << "Manager Department: " << myManager.getDepartment() << endl;

    cout << "\nEngineer Name: " << myEngineer.getName() << endl;
    cout << "Engineer Specialty: " << myEngineer.getSpecialty() << endl;

    return 0;
}


108 )  Create a base class called Person with data members for name, age, and gender.
Derive two classes Student and Teacher from the base class. The Student class
should have additional data members for roll number and class, while the
Teacher class should have additional data members for subject and salary. Write
member functions to get and set the data members for each class.


#include <iostream>
#include <string>

using namespace std;

class Person {
protected:
    string name;
    int age;
    string gender;

public:
    Person(string _name, int _age, string _gender) : name(_name), age(_age), gender(_gender) {}

    void setName(string _name) { name = _name; }
    string getName() const { return name; }

    void setAge(int _age) { age = _age; }
    int getAge() const { return age; }

    void setGender(string _gender) { gender = _gender; }
    string getGender() const { return gender; }
};

class Student : public Person {
private:
    int rollNumber;
    string studentClass;

public:
    Student(string _name, int _age, string _gender, int _rollNumber, string _studentClass)
        : Person(_name, _age, _gender), rollNumber(_rollNumber), studentClass(_studentClass) {}

    void setRollNumber(int _rollNumber) { rollNumber = _rollNumber; }
    int getRollNumber() const { return rollNumber; }

    void setStudentClass(string _studentClass) { studentClass = _studentClass; }
    string getStudentClass() const { return studentClass; }
};

class Teacher : public Person {
private:
    string subject;
    double salary;

public:
    Teacher(string _name, int _age, string _gender, string _subject, double _salary)
        : Person(_name, _age, _gender), subject(_subject), salary(_salary) {}

    void setSubject(string _subject) { subject = _subject; }
    string getSubject() const { return subject; }

    void setSalary(double _salary) { salary = _salary; }
    double getSalary() const { return salary; }
};

int main() {
    Student myStudent("John Doe", 20, "Male", 101, "10th Grade");
    Teacher myTeacher("Mrs. Smith", 35, "Female", "Mathematics", 50000.0);

    cout << "Student Name: " << myStudent.getName() << endl;
    cout << "Student Roll Number: " << myStudent.getRollNumber() << endl;

    cout << "\nTeacher Name: " << myTeacher.getName() << endl;
    cout << "Teacher Subject: " << myTeacher.getSubject() << endl;

    return 0;
}

