1) Write a program to read in a character and determine if it is a vowel or a consonant

#include <iostream>
using namespace std;

int main() {
    char ch;

    // Read a character from the user
    cout << "Enter a character: ";
    cin >> ch;

    // Check if the entered character is a vowel
    if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' ||
        ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {
        cout << ch << " is a vowel." << endl;
    } else {
        cout << ch << " is a consonant." << endl;
    }

    return 0;
}

2) Write a program to read in two integers and use the conditional operator to determine 
which number is greater

#include <iostream>
using namespace std;

int main() {
    int num1, num2;

    // Read two integers from the user
    cout << "Enter the first integer: ";
    cin >> num1;

    cout << "Enter the second integer: ";
    cin >> num2;
    
    if (num1 == num2)
        cout << "both are equal";
        else if (num1 > num2)
        cout << num1 << " is greater than " << num2;
        else
        cout << num2 << " is greater than " << num1;

    return 0;
}

3) Write a program to read in two integers and swap their values using the bitwise XOR 
operator. 

#include <iostream>
using namespace std;

int main() {
    int num1, num2;

    // Read two integers from the user
    cout << "Enter the first integer: ";
    cin >> num1;

    cout << "Enter the second integer: ";
    cin >> num2;

    // Swap values using bitwise XOR
    num1 = num1 ^ num2;
    num2 = num1 ^ num2;
    num1 = num1 ^ num2;

    // Output the swapped values
    cout << "After swapping:" << endl;
    cout << "First integer: " << num1 << endl;
    cout << "Second integer: " << num2 << endl;

    return 0;
}

4) a program to read in a floating-point number and round it to the nearest integer 
using the floor and ceil functions

#include <iostream>
#include <cmath>
using namespace std;

int main() {
    double floatingNumber;

    // Read a floating-point number from the user
    cout << "Enter a floating-point number: ";
    cin >> floatingNumber;

    // Round to the nearest integer using floor and ceil
    int roundedDown = static_cast<int>(floor(floatingNumber));
    int roundedUp = static_cast<int>(ceil(floatingNumber));

    // Output the results
    cout << "Original number: " << floatingNumber << endl;
    cout << "Rounded down: " << roundedDown << endl;
    cout << "Rounded up: " << roundedUp << endl;

    return 0;
}

5) Write a program to read in three integers and determine which one is the maximum using 
the ternary conditional operator

#include <iostream>
using namespace std;

int main() {
    int num1, num2, num3;

    // Read three integers from the user
    cout << "Enter the first integer: ";
    cin >> num1;

    cout << "Enter the second integer: ";
    cin >> num2;

    cout << "Enter the third integer: ";
    cin >> num3;

    // Use the ternary conditional operator to find the maximum
    int maxNum = (num1 > num2) ? ((num1 > num3) ? num1 : num3) : ((num2 > num3) ? num2 : num3);

    // Output the result
    cout << "The maximum number is: " << maxNum << endl;

    return 0;
}

6) Write a program to read in two integers and determine if they are equal or not using the 
ternary conditional operator. 

#include <iostream>
using namespace std;

int main() {
    int num1, num2;

    // Read two integers from the user
    cout << "Enter the first integer: ";
    cin >> num1;

    cout << "Enter the second integer: ";
    cin >> num2;

    // Use the ternary conditional operator to check if the integers are equal
    string result = (num1 == num2) ? "Equal" : "Not Equal";

    // Output the result
    cout << "The two integers are: " << result << endl;

    return 0;
}

7) Write a program to read in an integer and determine if it is divisible by 3 or not using the 
ternary conditional operator


#include <iostream>
using namespace std;

int main() {
    int num;

    // Read an integer from the user
    cout << "Enter an integer: ";
    cin >> num;

    // Use the ternary conditional operator to check if the integer is divisible by 3
    string result = (num % 3 == 0) ? "Divisible by 3" : "Not divisible by 3";

    // Output the result
    cout << "The integer is: " << result << endl;

    return 0;
}

8) Write a program to read in an integer and print the multiplication table for that number 
using a for loop

#include <iostream>

int main() {
    int num;

    // Read an integer from the user
    std::cout << "Enter an integer: ";
    std::cin >> num;

    // Print the multiplication table for the entered number
    std::cout << "Multiplication table for " << num << ":\n";
    for (int i = 1; i <= 10; ++i) {
        std::cout << num << " * " << i << " = " << (num * i) << std::endl;
    }

    return 0;
}

9) Write a program to read in an integer and print the factorial of that number using a for 
loop

#include <iostream>

int main() {
    int num;

    // Read an integer from the user
    std::cout << "Enter an integer: ";
    std::cin >> num;

    // Calculate and print the factorial of the entered number
    long long factorial = 1;
    for (int i = 1; i <= num; ++i) {
        factorial *= i;
    }

    std::cout << "Factorial of " << num << " is: " << factorial << std::endl;

    return 0;
}

10) Write a program to read in an integer and determine if it is a prime number or not using a 
for loop

#include <iostream>

int main() {
    int num;
    bool isPrime = true;

    // Read an integer from the user
    std::cout << "Enter an integer: ";
    std::cin >> num;

    // Check if the entered number is a prime number
    if (num <= 1) {
        isPrime = false;
    } else {
        for (int i = 2; i <= num / 2; ++i) {
            if (num % i == 0) {
                isPrime = false;
                break;
            }
        }
    }

    // Output the result
    if (isPrime) {
        std::cout << num << " is a prime number." << std::endl;
    } else {
        std::cout << num << " is not a prime number." << std::endl;
    }

    return 0;
}

11) Write a program to read in an integer and print the Fibonacci series up to that number 
using a for loop

#include <iostream>

int main() {
    int num;

    // Read an integer from the user
    std::cout << "Enter an integer: ";
    std::cin >> num;

    // Print Fibonacci series up to the entered number
    int a = 0, b = 1, nextTerm;
    std::cout << "Fibonacci series up to " << num << ": ";

    for (int i=0;i<=num;i++) {
        std::cout << a << " ";
        nextTerm = a + b;
        a = b;
        b = nextTerm;
    }

    std::cout << std::endl;

    return 0;
}


12) Write a program to read in an integer and print the sum of all its digits using a while loop. 

#include <iostream>

int main() {
    int num, originalNum, remainder, sum = 0;

    // Read an integer from the user
    std::cout << "Enter an integer: ";
    std::cin >> num;

    // Store the original number
    originalNum = num;

    // Calculate the sum of digits using a while loop
    while (num != 0) {
        remainder = num % 10;
        sum += remainder;
        num /= 10;
    }

    // Output the result
    std::cout << "Sum of digits of " << originalNum << " is: " << sum << std::endl;

    return 0;
}

13) Write a program to read in an integer and determine if it is a palindrome or not using a 
while loop. 

#include <iostream>

int main() {
    int num, originalNum, reversedNum = 0, remainder;

    // Read an integer from the user
    std::cout << "Enter an integer: ";
    std::cin >> num;

    // Store the original number
    originalNum = num;

    // Reverse the number using a while loop
    while (num > 0) {
        remainder = num % 10;
        reversedNum = reversedNum * 10 + remainder;
        num /= 10;
    }

    // Check if the original number is equal to its reverse
    if (originalNum == reversedNum) {
        std::cout << originalNum << " is a palindrome." << std::endl;
    } else {
        std::cout << originalNum << " is not a palindrome." << std::endl;
    }

    return 0;
}

14) Write a program to read in two integers and compute their greatest common divisor using 
a do-while loop. 

#include <iostream>

int main() {
    int num1, num2;

    // Read two integers from the user
    std::cout << "Enter the first integer: ";
    std::cin >> num1;

    std::cout << "Enter the second integer: ";
    std::cin >> num2;

    // Ensure both numbers are positive
    if (num1 <= 0 || num2 <= 0) {
        std::cout << "Please enter positive integers." << std::endl;
        return 1;
    }

    int gcd;

    // Compute the GCD using the Euclidean algorithm and a do-while loop
    do {
        gcd = num1 % num2;
        num1 = num2;
        num2 = gcd;
    } while (num2 != 0);

    // Output the result
    std::cout << "The greatest common divisor (GCD) is: " << num1 << std::endl;

    return 0;
}


15) Write a program to read in an integer and determine if it is an Armstrong number or not. 

#include <iostream>
using namespace std;

int main() {
    int num, originalNum, remainder, result = 0;
    cout << "Enter a three-digit integer: ";
    cin >> num;
    originalNum = num;

    while (originalNum != 0) {
        // remainder contains the last digit
        remainder = originalNum % 10;
        
        result += remainder * remainder * remainder;
        
        // removing last digit from the orignal number
        originalNum /= 10;
    }

    if (result == num)
        cout << num << " is an Armstrong number.";
    else
        cout << num << " is not an Armstrong number.";

    return 0;
}

16) PERFORM ARITHMETIC OPERATIONS

#include <iostream>

using namespace std;

int main() {
    int num1, num2,sum,difference,product,division,modulo;
    cout << "Enter the first floating-point number: ";
    cin >> num1;
    cout << "Enter the second floating-point number: ";
    cin >> num2;
    sum = num1 + num2;
    difference = num1 - num2;
    product = num1 * num2;
    if (num2 != 0) {
        division = num1 / num2;
        modulo = num1 % num2;
        cout << "Sum: " << sum << endl;
        cout << "Difference: " << difference << endl;
        cout << "Product: " << product << endl;
        cout << "division: " << division << endl;
        cout << "modulo: " << modulo << endl;
    } else 
        cout << "Error: Division by zero is undefined." << endl;
        return 0;
    
}

17) FLOATING NUMBER ARITHMETIC OPERATIONS

#include <iostream>
#include <cmath> 
using namespace std;

int main() {
    float num1, num2;
    cout << "Enter first floating-point number: ";
    cin >> num1;
    cout << "Enter second floating-point number: ";
    cin >> num2;
    float sum = num1 + num2;
    cout << "Addition: " << num1 << " + " << num2 << " = " << sum << endl;

    float diff = num1 - num2;
    cout << "Subtraction: " << num1 << " - " << num2 << " = " << diff << endl;

    float product = num1 * num2;
    cout << "Multiplication: " << num1 << " * " << num2 << " = " << product << endl;

    if (num2 != 0) {
        float quotient = num1 / num2;
        cout << "Division: " << num1 << " / " << num2 << " = " << quotient << endl;
    } else {
        cout << "Division by zero is undefined." << endl;
    }

    if (num2 != 0) {
        float mod = fmod(num1, num2); 
        cout << "Modulo: " << num1 << " % " << num2 << " = " << mod << endl;
    } else {
        cout << "Modulo by zero is undefined." << endl;
    }

    return 0;
}

18 ) Write a C++ program to reverse the elements of an array.


#include <iostream>
using namespace std;

void reverseArray(int arr[], int n) {
  int temp;
  for(int i = 0; i < n / 2; i++) {
    temp = arr[i];
    arr[i] = arr[n - i - 1];
    arr[n - i - 1] = temp;
  }
}

int main() {
  int n;
  cout << "Enter size of array: ";
  cin >> n;
  
  int arr[n];
  cout << "Enter elements: ";
  for(int i = 0; i < n; i++) {
    cin >> arr[i]; 
  }
  
  reverseArray(arr, n); 
  
  cout << "Reversed array: ";
  for(int i = 0; i < n; i++) {
    cout << arr[i] << " ";  
  }
  
  return 0;
}


19) Write a C++ program to insert an element into an array at a specific position


#include <iostream>
using namespace std;

void insertElement(int arr[], int &n, int x, int pos) {
  
  // shift elements to the right  
  for(int i = n; i >= pos; i--) {
    arr[i] = arr[i - 1];
  }
  
  // insert x at pos
  arr[pos - 1] = x;
  
  // increase size
  n++; 
}

int main() {

  int n;
  cout << "Enter size of array: ";
  cin >> n;
  
  int arr[n+1]; // size n+1 to handle insertion
  
  cout << "Enter elements: ";
  for(int i = 0; i < n; i++) {
     cin >> arr[i];
  }

  int x; 
  cout << "\nEnter element to insert: ";
  cin >> x;
  
  int pos;
  cout << "Enter position: ";
  cin >> pos;
  
  insertElement(arr, n, x, pos); 

  cout << "\nArray after insertion: ";
  for(int i = 0; i < n; i++) {
    cout << arr[i] << " ";
  } 
  
  return 0;
}


20) Write a C++ program to delete an element from an array at a specific position.


#include <iostream>
using namespace std;

void deleteElement(int arr[], int &n, int pos) {
  // shift elements left  
  for(int i = pos-1; i < n-1; i++) {
    arr[i] = arr[i + 1];
  }
  
  // decrease size
  n--;
}

int main() {

  int n; 
  cout << "Enter size of array: ";
  cin >> n;

  int arr[n];
  cout << "Enter elements: ";

  for(int i = 0; i < n; i++) {
    cin >> arr[i];  
  }

  int pos;
  cout << "\nEnter position to delete: ";
  cin >> pos;

  deleteElement(arr, n, pos);

  cout << "\nArray after deletion: "; 
  for(int i = 0; i < n; i++) {
    cout << arr[i] << " "; 
  }

  return 0;
}

21) Write a C++ program to find the sum of elements in an array.


#include <iostream>
using namespace std;

int findSum(int arr[], int n) {
  int sum = 0;
  for(int i = 0; i < n; i++) {
    sum += arr[i];
  }
  return sum;
}

int main() {
  
  int n;
  cout << "Enter size of array: ";
  cin >> n;

  int arr[n];  
  cout << "Enter elements: ";
  for(int i = 0; i < n; i++) {
     cin >> arr[i];
  }

  int sum = findSum(arr, n);
  
  cout << "\nSum of array elements: " << sum;
  
  return 0;
}


22 ) Write a C++ program to find the average of elements in an array.


#include <iostream>
using namespace std;

float findAverage(int arr[], int n) {
  int sum = 0; 
  for(int i = 0; i < n; i++) {
    sum += arr[i];
  }
  
  return (float)sum / n; 
}

int main() {

  int n;
  cout << "Enter size of array: ";
  cin >> n;

  int arr[n];
  cout << "Enter " << n << " elements: ";
  for(int i = 0; i < n; i++) {
    cin >> arr[i];
  }

  float avg = findAverage(arr, n);

  cout << "\nAverage of array elements: " << avg;
  
  return 0;
}


23 )  Write a C++ program to find the second largest element in an array


#include <iostream>
using namespace std;

int secondLargest(int arr[], int n){
  
  int largest = 0, second = -1;

  for(int i = 1; i < n; i++){
    if(arr[i] > arr[largest]){
      second = largest;
      largest = i; 
    }
    else if(arr[i] != arr[largest]){
      if(second == -1 || arr[i] > arr[second]) {
        second = i;
      }
    } 
  }

  if(second == -1) {
    return -1;  
  }  
  return arr[second];
}

int main() {

  int n;
  cout << "Enter size: ";
  cin >> n;  

  int arr[n];
  cout << "Enter elements: ";
  for(int i=0; i<n; i++) {
    cin>>arr[i];
  }
  
  int res = secondLargest(arr, n);

  if(res != -1) {
    cout << "Second largest element: " << res;
  }
  else {
    cout << "There is no second largest element";
  }

  return 0;
}


24 ) Write a C++ program to find the number of occurrences of a value in an array.

#include <iostream>
using namespace std;

int findOccurrences(int arr[], int n, int x) {
  int count = 0;
  for(int i = 0; i < n; i++) {
    if(arr[i] == x)
      count++;
  }
  return count;
}

int main() {
  
  int n;
  cout << "Enter size of array: ";
  cin >> n;

  int arr[n];
  cout << "Enter elements: ";
  for(int i = 0; i < n; i++) {
    cin >> arr[i];  
  }

  int x;
  cout << "\nEnter element to search: ";  
  cin >> x;

  int occ = findOccurrences(arr, n, x);
  
  cout << x << " occurs " << occ << " times.";

  return 0;  
}


25 ) Write a C++ program to merge two arrays into a single array.


#include <iostream>
using namespace std;

void mergeArrays(int arr1[], int n1, int arr2[], int n2, int arr3[]) {
  int i = 0, j = 0, k = 0;
  
  // traverse both arrays 
  while(i < n1 && j < n2) {
    if(arr1[i] < arr2[j]) {
      arr3[k] = arr1[i];
      i++;
    }
    else {
      arr3[k] = arr2[j];
      j++;
    }
    k++;
  }

  // store remaining elements of first array
  while(i < n1) {
    arr3[k] = arr1[i];
    i++; k++;
  }
  
  // store remaining elements of second array
  while(j < n2) {
    arr3[k] = arr2[j];
    j++; k++;  
  }
}

int main() {
  
  int n1, n2;

  cout << "Enter size of first array: ";
  cin >> n1;

  int arr1[n1];  
  cout << "Enter elements: ";
  for(int i = 0; i < n1; i++) {
    cin >> arr1[i]; 
  }

  cout << "Enter size of second array: ";
  cin >> n2;

  int arr2[n2];
  cout << "Enter elements: ";
  for(int i = 0; i < n2; i++) { 
    cin >> arr2[i];
  }
  
  // merged array size
  int n3 = n1 + n2; 
  int arr3[n3];

  mergeArrays(arr1, n1, arr2, n2, arr3);

  // print merged array
  cout << "Merged Array: ";
  for(int i = 0; i < n3; i++) {
    cout << arr3[i] << " ";
  }
  
  return 0;
}


26 ) Write a C++ program to create a dynamic array using pointers and display its values.


#include <iostream>
using namespace std;

int main() {

  int n;
  cout << "Enter size: ";
  cin >> n;

  int* arr = new int[n];

  cout << "Enter elements: " << endl;
  for(int i = 0; i < n; i++) {
    cin >> arr[i];
  }

  cout << "Array elements: " << endl;
  for(int i = 0; i < n; i++) {
    cout << arr[i] << " "; 
  }

  delete [] arr;
  
  return 0;
}


27 ) Write a C++ program to create a dynamic two-dimensional array using pointers and 
display its values.


#include <iostream>
using namespace std;

int main() {

  int rows, cols;

  cout << "Enter rows and columns: ";
  cin >> rows >> cols;

  // allocate memory dynamically 
  int** arr = new int*[rows];
  for(int i=0; i<rows; i++) {
    arr[i] = new int[cols]; 
  }

  cout << "Enter elements: " << endl;
  
  // input elements  
  for(int i=0; i<rows; i++) {
    for(int j=0; j<cols; j++) {
      cin >> arr[i][j];
    }
  }
  
  cout << "2D array elements: " << endl;
  
  // print array 
  for(int i=0; i<rows; i++) {
    for(int j=0; j<cols; j++) {
      cout << arr[i][j] << " "; 
    }
    cout << endl;  
  }

  // release memory
  for(int i=0; i<rows; i++)
   delete [] arr[i];

  delete [] arr;
  
  return 0;
}


28 ) Write a C++ program to add 2 matrics.

#include <iostream>
using namespace std;

int main() {
  // Declare variables for matrix dimensions
  int rows, cols;

  // Get matrix dimensions from the user
  cout << "Enter number of rows: "; 
  cin >> rows;
  cout << "Enter number of columns: "; 
  cin >> cols;
  
  // Declare matrices for input
  int mat1[rows][cols];
  int mat2[rows][cols];
  
  // Read elements of matrix 1 from the user
  cout << "Enter elements of matrix 1:" << endl;
  for(int i = 0; i < rows; i++) {
    for(int j = 0; j < cols; j++) {
      cin >> mat1[i][j]; 
    }
  }

  // Read elements of matrix 2 from the user
  cout << "Enter elements of matrix 2:" << endl;
  for(int i = 0; i < rows; i++) {
    for(int j = 0; j < cols; j++) {
      cin >> mat2[i][j];
    }
  }

  // Declare matrix for the sum of matrices
  int sum[rows][cols];

  // Perform addition of corresponding elements
  for(int i = 0; i < rows; i++) {
    for(int j = 0; j < cols; j++) {
      sum[i][j] = mat1[i][j] + mat2[i][j];
    }
  }

  // Print the sum matrix
  cout << "Sum of matrices:" << endl;
  for(int i = 0; i < rows; i++) {
    for(int j = 0; j < cols; j++) {
      cout << sum[i][j] << " "; 
    }
    cout << endl; 
  }

  return 0;
}


29) multiply two matrices


#include <iostream>
using namespace std;

int main() {
  int r1, c1, r2, c2;

  // Get matrix 1 dimensions
  cout << "Enter number of rows and columns for first matrix: ";
  cin >> r1 >> c1;

  // Get matrix 2 dimensions 
  cout << "Enter number of rows and columns for second matrix: ";
  cin >> r2 >> c2;

  // Check if matrices can be multiplied
  if(c1 != r2) {
    cout << "Matrices cannot be multiplied";
    return 0;
  }

  // Declare matrices
  int mat1[r1][c1]; 
  int mat2[r2][c2];
  int result[r1][c2];

  // Read matrix 1
  cout << "Enter elements of matrix 1:" << endl;
  for(int i=0; i<r1; i++) {
    for(int j=0; j<c1; j++) {
      cin >> mat1[i][j];
    }
  }
  
  // Read matrix 2
  cout << "Enter elements of matrix 2:" << endl;
  for(int i=0; i<r2; i++) {
    for(int j=0; j<c2; j++) {
      cin >> mat2[i][j];
    }
  }

  // Perform multiplication
  for(int i=0; i<r1; i++) {
    for(int j=0; j<c2; j++) {
      result[i][j] = 0;
      for(int k=0; k<c1; k++) {
        result[i][j] += mat1[i][k] * mat2[k][j];
      }
    }
  }

  // Print result
  cout << "Resultant matrix: " << endl;
  for(int i=0; i<r1; i++) {
    for(int j=0; j<c2; j++){
      cout << result[i][j] << " "; 
    }
    cout << endl;
  }

  return 0;
}

